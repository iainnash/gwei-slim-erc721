{
  "0x918be8fc2cbde9906512767d39a95cb72b473ea0969892a68c2bff1d55ed7249": {
    "name": "ChildNFTOnChainData",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "ChildNFTOnChainData",
      "sourceName": "contracts/ChildNFTOnChainData.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract ERC721Base",
              "name": "baseFactory",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint16",
              "name": "royaltyBps",
              "type": "uint16"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "stateMutability": "payable",
          "type": "fallback"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "burn",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "currentTokenId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "nftMetadata",
              "type": "string"
            }
          ],
          "name": "mint",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "nftImplementation",
          "outputs": [
            {
              "internalType": "contract ERC721Base",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "bytecode": "0x60806040523480156200001157600080fd5b50604051620009d5380380620009d58339810160408190526200003491620002a9565b620186a080546001600160a01b0319166001600160a01b0386169081179091556040516301ffc9a760e01b815263d653026160e01b600482015285918591859185916301ffc9a79060240160206040518083038186803b1580156200009857600080fd5b505afa158015620000ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d391906200034e565b620001135760405162461bcd60e51b81526004016200010a906020808252600490820152632161706960e01b604082015260600190565b60405180910390fd5b6000846001600160a01b031633858585604051602401620001389493929190620003a7565b60408051601f198184030181529181526020820180516001600160e01b0316636f58bf9360e11b179052516200016f9190620003f7565b600060405180830381855af49150503d8060008114620001ac576040519150601f19603f3d011682016040523d82523d6000602084013e620001b1565b606091505b5050905080620001c057600080fd5b50505050505050505062000415565b634e487b7160e01b600052604160045260246000fd5b60005b8381101562000202578181015183820152602001620001e8565b8381111562000212576000848401525b50505050565b600082601f8301126200022a57600080fd5b81516001600160401b0380821115620002475762000247620001cf565b604051601f8301601f19908116603f01168101908282118183101715620002725762000272620001cf565b816040528381528660208588010111156200028c57600080fd5b6200029f846020830160208901620001e5565b9695505050505050565b60008060008060808587031215620002c057600080fd5b84516001600160a01b0381168114620002d857600080fd5b60208601519094506001600160401b0380821115620002f657600080fd5b620003048883890162000218565b945060408701519150808211156200031b57600080fd5b506200032a8782880162000218565b925050606085015161ffff811681146200034357600080fd5b939692955090935050565b6000602082840312156200036157600080fd5b815180151581146200037257600080fd5b9392505050565b6000815180845262000393816020860160208601620001e5565b601f01601f19169290920160200192915050565b6001600160a01b0385168152608060208201819052600090620003cd9083018662000379565b8281036040840152620003e1818662000379565b91505061ffff8316606083015295945050505050565b600082516200040b818460208701620001e5565b9190910192915050565b6105b080620004256000396000f3fe60806040526004361061004d5760003560e01c80629a9b7b1461006157806342966c681461008c578063c87b56dd146100ac578063d85d3d27146100d9578063f61ac58b146100f957610057565b3661005757600080fd5b61005f610133565b005b34801561006d57600080fd5b50610079620186a15481565b6040519081526020015b60405180910390f35b34801561009857600080fd5b5061005f6100a73660046103e1565b610165565b3480156100b857600080fd5b506100cc6100c73660046103e1565b61019c565b60405161008391906103fa565b3480156100e557600080fd5b5061005f6100f4366004610465565b610240565b34801561010557600080fd5b50620186a05461011b906001600160a01b031681565b6040516001600160a01b039091168152602001610083565b620186a0546001600160a01b03163660008037600080366000845af43d6000803e808015610160573d6000f35b3d6000fd5b61016e8161028b565b6040805160208082018084526000808452858152620186a290925292902090516101989290610348565b5050565b6000818152620186a2602052604090208054606091906101bb90610516565b80601f01602080910402602001604051908101604052809291908181526020018280546101e790610516565b80156102345780601f1061020957610100808354040283529160200191610234565b820191906000526020600020905b81548152906001019060200180831161021757829003601f168201915b50505050509050919050565b620186a1546000908152620186a260209081526040909120825161026692840190610348565b50620186a1805461028891339190600061027f83610551565b919050556102df565b50565b604051630852cd8d60e31b81526004810182905230906342966c6890602401600060405180830381600087803b1580156102c457600080fd5b505af11580156102d8573d6000803e3d6000fd5b5050505050565b306040516340c10f1960e01b81526001600160a01b0384811660048301526024820184905291909116906340c10f1990604401600060405180830381600087803b15801561032c57600080fd5b505af1158015610340573d6000803e3d6000fd5b505050505050565b82805461035490610516565b90600052602060002090601f01602090048101928261037657600085556103bc565b82601f1061038f57805160ff19168380011785556103bc565b828001600101855582156103bc579182015b828111156103bc5782518255916020019190600101906103a1565b506103c89291506103cc565b5090565b5b808211156103c857600081556001016103cd565b6000602082840312156103f357600080fd5b5035919050565b600060208083528351808285015260005b818110156104275785810183015185820160400152820161040b565b81811115610439576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561047757600080fd5b813567ffffffffffffffff8082111561048f57600080fd5b818401915084601f8301126104a357600080fd5b8135818111156104b5576104b561044f565b604051601f8201601f19908116603f011681019083821181831017156104dd576104dd61044f565b816040528281528760208487010111156104f657600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061052a57607f821691505b6020821081141561054b57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561057357634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212202242f08a4b0d79051330c6b85ab9983de3f5121f55dae0be323c7cb091349b0964736f6c63430008090033",
      "deployedBytecode": "0x60806040526004361061004d5760003560e01c80629a9b7b1461006157806342966c681461008c578063c87b56dd146100ac578063d85d3d27146100d9578063f61ac58b146100f957610057565b3661005757600080fd5b61005f610133565b005b34801561006d57600080fd5b50610079620186a15481565b6040519081526020015b60405180910390f35b34801561009857600080fd5b5061005f6100a73660046103e1565b610165565b3480156100b857600080fd5b506100cc6100c73660046103e1565b61019c565b60405161008391906103fa565b3480156100e557600080fd5b5061005f6100f4366004610465565b610240565b34801561010557600080fd5b50620186a05461011b906001600160a01b031681565b6040516001600160a01b039091168152602001610083565b620186a0546001600160a01b03163660008037600080366000845af43d6000803e808015610160573d6000f35b3d6000fd5b61016e8161028b565b6040805160208082018084526000808452858152620186a290925292902090516101989290610348565b5050565b6000818152620186a2602052604090208054606091906101bb90610516565b80601f01602080910402602001604051908101604052809291908181526020018280546101e790610516565b80156102345780601f1061020957610100808354040283529160200191610234565b820191906000526020600020905b81548152906001019060200180831161021757829003601f168201915b50505050509050919050565b620186a1546000908152620186a260209081526040909120825161026692840190610348565b50620186a1805461028891339190600061027f83610551565b919050556102df565b50565b604051630852cd8d60e31b81526004810182905230906342966c6890602401600060405180830381600087803b1580156102c457600080fd5b505af11580156102d8573d6000803e3d6000fd5b5050505050565b306040516340c10f1960e01b81526001600160a01b0384811660048301526024820184905291909116906340c10f1990604401600060405180830381600087803b15801561032c57600080fd5b505af1158015610340573d6000803e3d6000fd5b505050505050565b82805461035490610516565b90600052602060002090601f01602090048101928261037657600085556103bc565b82601f1061038f57805160ff19168380011785556103bc565b828001600101855582156103bc579182015b828111156103bc5782518255916020019190600101906103a1565b506103c89291506103cc565b5090565b5b808211156103c857600081556001016103cd565b6000602082840312156103f357600080fd5b5035919050565b600060208083528351808285015260005b818110156104275785810183015185820160400152820161040b565b81811115610439576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561047757600080fd5b813567ffffffffffffffff8082111561048f57600080fd5b818401915084601f8301126104a357600080fd5b8135818111156104b5576104b561044f565b604051601f8201601f19908116603f011681019083821181831017156104dd576104dd61044f565b816040528281528760208487010111156104f657600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061052a57607f821691505b6020821081141561054b57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561057357634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212202242f08a4b0d79051330c6b85ab9983de3f5121f55dae0be323c7cb091349b0964736f6c63430008090033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_2084": {
              "entryPoint": null,
              "id": 2084,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@_2195": {
              "entryPoint": null,
              "id": 2195,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "abi_decode_string_fromMemory": {
              "entryPoint": 536,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bool_fromMemory": {
              "entryPoint": 846,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_contract$_ERC721Base_$2653t_string_memory_ptrt_string_memory_ptrt_uint16_fromMemory": {
              "entryPoint": 681,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_encode_string": {
              "entryPoint": 889,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 1015,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_string_memory_ptr_t_string_memory_ptr_t_uint16__to_t_address_t_string_memory_ptr_t_string_memory_ptr_t_uint16__fromStack_reversed": {
              "entryPoint": 935,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_92180d09906d0ab366208eb9b6f36246b7f1e44a392303e14b27292c71ca78ae__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_memory_to_memory": {
              "entryPoint": 485,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 463,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:3944:21",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:21",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "46:95:21",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "63:1:21",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "70:3:21",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "75:10:21",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "66:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "66:20:21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "56:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "56:31:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "56:31:21"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "103:1:21",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "106:4:21",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "96:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "96:15:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "96:15:21"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "127:1:21",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "130:4:21",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "120:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "120:15:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "120:15:21"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "14:127:21"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "199:205:21",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "209:10:21",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "218:1:21",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "213:1:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "278:63:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "303:3:21"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "308:1:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "299:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "299:11:21"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "322:3:21"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "327:1:21"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "318:3:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "318:11:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "312:5:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "312:18:21"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "292:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "292:39:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "292:39:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "239:1:21"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "242:6:21"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "236:2:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "236:13:21"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "250:19:21",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "252:15:21",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "261:1:21"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "264:2:21",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "257:3:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "257:10:21"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "252:1:21"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "232:3:21",
                            "statements": []
                          },
                          "src": "228:113:21"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "367:31:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "380:3:21"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "385:6:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "376:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "376:16:21"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "394:1:21",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "369:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "369:27:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "369:27:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "356:1:21"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "359:6:21"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "353:2:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "353:13:21"
                          },
                          "nodeType": "YulIf",
                          "src": "350:48:21"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "177:3:21",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "182:3:21",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "187:6:21",
                        "type": ""
                      }
                    ],
                    "src": "146:258:21"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "473:622:21",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "522:16:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "531:1:21",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "534:1:21",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "524:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "524:12:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "524:12:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "501:6:21"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "509:4:21",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "497:3:21"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "497:17:21"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "516:3:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "493:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "493:27:21"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "486:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "486:35:21"
                          },
                          "nodeType": "YulIf",
                          "src": "483:55:21"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "547:23:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "563:6:21"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "557:5:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "557:13:21"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "551:2:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "579:28:21",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "597:2:21",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "601:1:21",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "593:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "593:10:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "605:1:21",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "589:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "589:18:21"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "583:2:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "630:22:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "632:16:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "632:18:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "632:18:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "622:2:21"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "626:2:21"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "619:2:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "619:10:21"
                          },
                          "nodeType": "YulIf",
                          "src": "616:36:21"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "661:17:21",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "675:2:21",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "671:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "671:7:21"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "665:2:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "687:23:21",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "707:2:21",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "701:5:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "701:9:21"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "691:6:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "719:71:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "741:6:21"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "765:2:21"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "769:4:21",
                                                "type": "",
                                                "value": "0x1f"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "761:3:21"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "761:13:21"
                                          },
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "776:2:21"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "757:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "757:22:21"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "781:2:21",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "753:3:21"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "753:31:21"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "786:2:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "749:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "749:40:21"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "737:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "737:53:21"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "723:10:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "849:22:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "851:16:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "851:18:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "851:18:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "808:10:21"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "820:2:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "805:2:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "805:18:21"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "828:10:21"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "840:6:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "825:2:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "825:22:21"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "802:2:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "802:46:21"
                          },
                          "nodeType": "YulIf",
                          "src": "799:72:21"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "887:2:21",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "891:10:21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "880:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "880:22:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "880:22:21"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "918:6:21"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "926:2:21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "911:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "911:18:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "911:18:21"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "977:16:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "986:1:21",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "989:1:21",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "979:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "979:12:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "979:12:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "952:6:21"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "960:2:21"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "948:3:21"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "948:15:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "965:4:21",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "944:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "944:26:21"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "972:3:21"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "941:2:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "941:35:21"
                          },
                          "nodeType": "YulIf",
                          "src": "938:55:21"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1028:6:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1036:4:21",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1024:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1024:17:21"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1047:6:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1055:4:21",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1043:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1043:17:21"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1062:2:21"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1002:21:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1002:63:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1002:63:21"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1074:15:21",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "1083:6:21"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "1074:5:21"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_string_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "447:6:21",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "455:3:21",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "463:5:21",
                        "type": ""
                      }
                    ],
                    "src": "409:686:21"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1270:740:21",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1317:16:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1326:1:21",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1329:1:21",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1319:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1319:12:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1319:12:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1291:7:21"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1300:9:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1287:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1287:23:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1312:3:21",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1283:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1283:33:21"
                          },
                          "nodeType": "YulIf",
                          "src": "1280:53:21"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1342:29:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1361:9:21"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1355:5:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1355:16:21"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1346:5:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1434:16:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1443:1:21",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1446:1:21",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1436:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1436:12:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1436:12:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1393:5:21"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "1404:5:21"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1419:3:21",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1424:1:21",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "1415:3:21"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1415:11:21"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1428:1:21",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "1411:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1411:19:21"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1400:3:21"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1400:31:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1390:2:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1390:42:21"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1383:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1383:50:21"
                          },
                          "nodeType": "YulIf",
                          "src": "1380:70:21"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1459:15:21",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1469:5:21"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1459:6:21"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1483:39:21",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1507:9:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1518:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1503:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1503:18:21"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1497:5:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1497:25:21"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "1487:6:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1531:28:21",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1549:2:21",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1553:1:21",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "1545:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1545:10:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1557:1:21",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1541:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1541:18:21"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1535:2:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1586:16:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1595:1:21",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1598:1:21",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1588:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1588:12:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1588:12:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1574:6:21"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1582:2:21"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1571:2:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1571:14:21"
                          },
                          "nodeType": "YulIf",
                          "src": "1568:34:21"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1611:71:21",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1654:9:21"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1665:6:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1650:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1650:22:21"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1674:7:21"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "1621:28:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1621:61:21"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1611:6:21"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1691:41:21",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1717:9:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1728:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1713:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1713:18:21"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1707:5:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1707:25:21"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "1695:8:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1761:16:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1770:1:21",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1773:1:21",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1763:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1763:12:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1763:12:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "1747:8:21"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1757:2:21"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1744:2:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1744:16:21"
                          },
                          "nodeType": "YulIf",
                          "src": "1741:36:21"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1786:73:21",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1829:9:21"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1840:8:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1825:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1825:24:21"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1851:7:21"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "1796:28:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1796:63:21"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "1786:6:21"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1868:40:21",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1893:9:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1904:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1889:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1889:18:21"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1883:5:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1883:25:21"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "1872:7:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1962:16:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1971:1:21",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1974:1:21",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1964:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1964:12:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1964:12:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1930:7:21"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "1943:7:21"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1952:6:21",
                                        "type": "",
                                        "value": "0xffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1939:3:21"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1939:20:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1927:2:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1927:33:21"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1920:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1920:41:21"
                          },
                          "nodeType": "YulIf",
                          "src": "1917:61:21"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1987:17:21",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "1997:7:21"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "1987:6:21"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_ERC721Base_$2653t_string_memory_ptrt_string_memory_ptrt_uint16_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1212:9:21",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1223:7:21",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1235:6:21",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1243:6:21",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "1251:6:21",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "1259:6:21",
                        "type": ""
                      }
                    ],
                    "src": "1100:910:21"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2114:103:21",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2124:26:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2136:9:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2147:2:21",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2132:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2132:18:21"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2124:4:21"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2166:9:21"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2181:6:21"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2193:3:21",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2198:10:21",
                                        "type": "",
                                        "value": "0xffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "2189:3:21"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2189:20:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2177:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2177:33:21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2159:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2159:52:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2159:52:21"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2083:9:21",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2094:6:21",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2105:4:21",
                        "type": ""
                      }
                    ],
                    "src": "2015:202:21"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2300:199:21",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2346:16:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2355:1:21",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2358:1:21",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2348:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2348:12:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2348:12:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2321:7:21"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2330:9:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2317:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2317:23:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2342:2:21",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2313:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2313:32:21"
                          },
                          "nodeType": "YulIf",
                          "src": "2310:52:21"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2371:29:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2390:9:21"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2384:5:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2384:16:21"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2375:5:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2453:16:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2462:1:21",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2465:1:21",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2455:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2455:12:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2455:12:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2422:5:21"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "2443:5:21"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "2436:6:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2436:13:21"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "2429:6:21"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2429:21:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "2419:2:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2419:32:21"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2412:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2412:40:21"
                          },
                          "nodeType": "YulIf",
                          "src": "2409:60:21"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2478:15:21",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2488:5:21"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2478:6:21"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2266:9:21",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2277:7:21",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2289:6:21",
                        "type": ""
                      }
                    ],
                    "src": "2222:277:21"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2678:153:21",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2695:9:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2706:2:21",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2688:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2688:21:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2688:21:21"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2729:9:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2740:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2725:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2725:18:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2745:1:21",
                                "type": "",
                                "value": "4"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2718:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2718:29:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2718:29:21"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2767:9:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2778:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2763:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2763:18:21"
                              },
                              {
                                "hexValue": "21617069",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2783:6:21",
                                "type": "",
                                "value": "!api"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2756:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2756:34:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2756:34:21"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2799:26:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2811:9:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2822:2:21",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2807:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2807:18:21"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2799:4:21"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_92180d09906d0ab366208eb9b6f36246b7f1e44a392303e14b27292c71ca78ae__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2655:9:21",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2669:4:21",
                        "type": ""
                      }
                    ],
                    "src": "2504:327:21"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2886:208:21",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2896:26:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2916:5:21"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2910:5:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2910:12:21"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "2900:6:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2938:3:21"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2943:6:21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2931:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2931:19:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2931:19:21"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2985:5:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2992:4:21",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2981:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2981:16:21"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "3003:3:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3008:4:21",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2999:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2999:14:21"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3015:6:21"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "2959:21:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2959:63:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2959:63:21"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3031:57:21",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "3046:3:21"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "3059:6:21"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3067:2:21",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "3055:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3055:15:21"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3076:2:21",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "3072:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3072:7:21"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3051:3:21"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3051:29:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3042:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3042:39:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3083:4:21",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3038:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3038:50:21"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "3031:3:21"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2863:5:21",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2870:3:21",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2878:3:21",
                        "type": ""
                      }
                    ],
                    "src": "2836:258:21"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3322:341:21",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3339:9:21"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "3354:6:21"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3370:3:21",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3375:1:21",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "3366:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3366:11:21"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3379:1:21",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3362:3:21"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3362:19:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3350:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3350:32:21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3332:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3332:51:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3332:51:21"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3403:9:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3414:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3399:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3399:18:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3419:3:21",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3392:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3392:31:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3392:31:21"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3432:60:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "3464:6:21"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3476:9:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3487:3:21",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3472:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3472:19:21"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "3446:17:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3446:46:21"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "3436:6:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3512:9:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3523:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3508:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3508:18:21"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3532:6:21"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3540:9:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3528:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3528:22:21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3501:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3501:50:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3501:50:21"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3560:41:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "3586:6:21"
                              },
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "3594:6:21"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "3568:17:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3568:33:21"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3560:4:21"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3621:9:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3632:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3617:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3617:18:21"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "3641:6:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3649:6:21",
                                    "type": "",
                                    "value": "0xffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3637:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3637:19:21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3610:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3610:47:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3610:47:21"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_string_memory_ptr_t_string_memory_ptr_t_uint16__to_t_address_t_string_memory_ptr_t_string_memory_ptr_t_uint16__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3267:9:21",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "3278:6:21",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "3286:6:21",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3294:6:21",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3302:6:21",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3313:4:21",
                        "type": ""
                      }
                    ],
                    "src": "3099:564:21"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3805:137:21",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3815:27:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3835:6:21"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3829:5:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3829:13:21"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "3819:6:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "3877:6:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3885:4:21",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3873:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3873:17:21"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3892:3:21"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3897:6:21"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "3851:21:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3851:53:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3851:53:21"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3913:23:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3924:3:21"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3929:6:21"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3920:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3920:16:21"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "3913:3:21"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "3781:3:21",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3786:6:21",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3797:3:21",
                        "type": ""
                      }
                    ],
                    "src": "3668:274:21"
                  }
                ]
              },
              "contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        copy_memory_to_memory(add(offset, 0x20), add(memPtr, 0x20), _1)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_contract$_ERC721Base_$2653t_string_memory_ptrt_string_memory_ptrt_uint16_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        let offset := mload(add(headStart, 32))\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value2 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n        let value_1 := mload(add(headStart, 96))\n        if iszero(eq(value_1, and(value_1, 0xffff))) { revert(0, 0) }\n        value3 := value_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_92180d09906d0ab366208eb9b6f36246b7f1e44a392303e14b27292c71ca78ae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 4)\n        mstore(add(headStart, 64), \"!api\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_string_memory_ptr_t_string_memory_ptr_t_uint16__to_t_address_t_string_memory_ptr_t_string_memory_ptr_t_uint16__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), 128)\n        let tail_1 := abi_encode_string(value1, add(headStart, 128))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_string(value2, tail_1)\n        mstore(add(headStart, 96), and(value3, 0xffff))\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n}",
              "id": 21,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "60806040523480156200001157600080fd5b50604051620009d5380380620009d58339810160408190526200003491620002a9565b620186a080546001600160a01b0319166001600160a01b0386169081179091556040516301ffc9a760e01b815263d653026160e01b600482015285918591859185916301ffc9a79060240160206040518083038186803b1580156200009857600080fd5b505afa158015620000ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d391906200034e565b620001135760405162461bcd60e51b81526004016200010a906020808252600490820152632161706960e01b604082015260600190565b60405180910390fd5b6000846001600160a01b031633858585604051602401620001389493929190620003a7565b60408051601f198184030181529181526020820180516001600160e01b0316636f58bf9360e11b179052516200016f9190620003f7565b600060405180830381855af49150503d8060008114620001ac576040519150601f19603f3d011682016040523d82523d6000602084013e620001b1565b606091505b5050905080620001c057600080fd5b50505050505050505062000415565b634e487b7160e01b600052604160045260246000fd5b60005b8381101562000202578181015183820152602001620001e8565b8381111562000212576000848401525b50505050565b600082601f8301126200022a57600080fd5b81516001600160401b0380821115620002475762000247620001cf565b604051601f8301601f19908116603f01168101908282118183101715620002725762000272620001cf565b816040528381528660208588010111156200028c57600080fd5b6200029f846020830160208901620001e5565b9695505050505050565b60008060008060808587031215620002c057600080fd5b84516001600160a01b0381168114620002d857600080fd5b60208601519094506001600160401b0380821115620002f657600080fd5b620003048883890162000218565b945060408701519150808211156200031b57600080fd5b506200032a8782880162000218565b925050606085015161ffff811681146200034357600080fd5b939692955090935050565b6000602082840312156200036157600080fd5b815180151581146200037257600080fd5b9392505050565b6000815180845262000393816020860160208601620001e5565b601f01601f19169290920160200192915050565b6001600160a01b0385168152608060208201819052600090620003cd9083018662000379565b8281036040840152620003e1818662000379565b91505061ffff8316606083015295945050505050565b600082516200040b818460208701620001e5565b9190910192915050565b6105b080620004256000396000f3fe60806040526004361061004d5760003560e01c80629a9b7b1461006157806342966c681461008c578063c87b56dd146100ac578063d85d3d27146100d9578063f61ac58b146100f957610057565b3661005757600080fd5b61005f610133565b005b34801561006d57600080fd5b50610079620186a15481565b6040519081526020015b60405180910390f35b34801561009857600080fd5b5061005f6100a73660046103e1565b610165565b3480156100b857600080fd5b506100cc6100c73660046103e1565b61019c565b60405161008391906103fa565b3480156100e557600080fd5b5061005f6100f4366004610465565b610240565b34801561010557600080fd5b50620186a05461011b906001600160a01b031681565b6040516001600160a01b039091168152602001610083565b620186a0546001600160a01b03163660008037600080366000845af43d6000803e808015610160573d6000f35b3d6000fd5b61016e8161028b565b6040805160208082018084526000808452858152620186a290925292902090516101989290610348565b5050565b6000818152620186a2602052604090208054606091906101bb90610516565b80601f01602080910402602001604051908101604052809291908181526020018280546101e790610516565b80156102345780601f1061020957610100808354040283529160200191610234565b820191906000526020600020905b81548152906001019060200180831161021757829003601f168201915b50505050509050919050565b620186a1546000908152620186a260209081526040909120825161026692840190610348565b50620186a1805461028891339190600061027f83610551565b919050556102df565b50565b604051630852cd8d60e31b81526004810182905230906342966c6890602401600060405180830381600087803b1580156102c457600080fd5b505af11580156102d8573d6000803e3d6000fd5b5050505050565b306040516340c10f1960e01b81526001600160a01b0384811660048301526024820184905291909116906340c10f1990604401600060405180830381600087803b15801561032c57600080fd5b505af1158015610340573d6000803e3d6000fd5b505050505050565b82805461035490610516565b90600052602060002090601f01602090048101928261037657600085556103bc565b82601f1061038f57805160ff19168380011785556103bc565b828001600101855582156103bc579182015b828111156103bc5782518255916020019190600101906103a1565b506103c89291506103cc565b5090565b5b808211156103c857600081556001016103cd565b6000602082840312156103f357600080fd5b5035919050565b600060208083528351808285015260005b818110156104275785810183015185820160400152820161040b565b81811115610439576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561047757600080fd5b813567ffffffffffffffff8082111561048f57600080fd5b818401915084601f8301126104a357600080fd5b8135818111156104b5576104b561044f565b604051601f8201601f19908116603f011681019083821181831017156104dd576104dd61044f565b816040528281528760208487010111156104f657600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061052a57607f821691505b6020821081141561054b57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561057357634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212202242f08a4b0d79051330c6b85ab9983de3f5121f55dae0be323c7cb091349b0964736f6c63430008090033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x9D5 CODESIZE SUB DUP1 PUSH3 0x9D5 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x2A9 JUMP JUMPDEST PUSH3 0x186A0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH4 0xD6530261 PUSH1 0xE0 SHL PUSH1 0x4 DUP3 ADD MSTORE DUP6 SWAP2 DUP6 SWAP2 DUP6 SWAP2 DUP6 SWAP2 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xAD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xD3 SWAP2 SWAP1 PUSH3 0x34E JUMP JUMPDEST PUSH3 0x113 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x10A SWAP1 PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP1 DUP3 ADD MSTORE PUSH4 0x21617069 PUSH1 0xE0 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0x138 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x3A7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x6F58BF93 PUSH1 0xE1 SHL OR SWAP1 MSTORE MLOAD PUSH3 0x16F SWAP2 SWAP1 PUSH3 0x3F7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x1AC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x1B1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH3 0x1C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP PUSH3 0x415 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x202 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x1E8 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x212 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x247 JUMPI PUSH3 0x247 PUSH3 0x1CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x272 JUMPI PUSH3 0x272 PUSH3 0x1CF JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x29F DUP5 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP10 ADD PUSH3 0x1E5 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x2C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x2D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x304 DUP9 DUP4 DUP10 ADD PUSH3 0x218 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x31B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x32A DUP8 DUP3 DUP9 ADD PUSH3 0x218 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH3 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH3 0x393 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH3 0x1E5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x3CD SWAP1 DUP4 ADD DUP7 PUSH3 0x379 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH3 0x3E1 DUP2 DUP7 PUSH3 0x379 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xFFFF DUP4 AND PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH3 0x40B DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH3 0x1E5 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x5B0 DUP1 PUSH3 0x425 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x9A9B7B EQ PUSH2 0x61 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0xAC JUMPI DUP1 PUSH4 0xD85D3D27 EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0xF61AC58B EQ PUSH2 0xF9 JUMPI PUSH2 0x57 JUMP JUMPDEST CALLDATASIZE PUSH2 0x57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5F PUSH2 0x133 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x79 PUSH3 0x186A1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F PUSH2 0xA7 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E1 JUMP JUMPDEST PUSH2 0x165 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCC PUSH2 0xC7 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E1 JUMP JUMPDEST PUSH2 0x19C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x3FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F PUSH2 0xF4 CALLDATASIZE PUSH1 0x4 PUSH2 0x465 JUMP JUMPDEST PUSH2 0x240 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x186A0 SLOAD PUSH2 0x11B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x83 JUMP JUMPDEST PUSH3 0x186A0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0x160 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x16E DUP2 PUSH2 0x28B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP1 DUP5 MSTORE PUSH1 0x0 DUP1 DUP5 MSTORE DUP6 DUP2 MSTORE PUSH3 0x186A2 SWAP1 SWAP3 MSTORE SWAP3 SWAP1 KECCAK256 SWAP1 MLOAD PUSH2 0x198 SWAP3 SWAP1 PUSH2 0x348 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH3 0x186A2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x1BB SWAP1 PUSH2 0x516 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1E7 SWAP1 PUSH2 0x516 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x234 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x209 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x234 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x217 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x186A1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH3 0x186A2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP3 MLOAD PUSH2 0x266 SWAP3 DUP5 ADD SWAP1 PUSH2 0x348 JUMP JUMPDEST POP PUSH3 0x186A1 DUP1 SLOAD PUSH2 0x288 SWAP2 CALLER SWAP2 SWAP1 PUSH1 0x0 PUSH2 0x27F DUP4 PUSH2 0x551 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE PUSH2 0x2DF JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x852CD8D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE ADDRESS SWAP1 PUSH4 0x42966C68 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST ADDRESS PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x340 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x354 SWAP1 PUSH2 0x516 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x376 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x3BC JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x38F JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x3BC JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x3BC JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x3BC JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x3A1 JUMP JUMPDEST POP PUSH2 0x3C8 SWAP3 SWAP2 POP PUSH2 0x3CC JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x3C8 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3CD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x427 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x40B JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x439 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x477 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x48F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x4B5 JUMPI PUSH2 0x4B5 PUSH2 0x44F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x4DD JUMPI PUSH2 0x4DD PUSH2 0x44F JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x4F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP3 DUP2 ADD PUSH1 0x20 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x52A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x54B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x573 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 TIMESTAMP CREATE DUP11 0x4B 0xD PUSH26 0x51330C6B85AB9983DE3F5121F55DAE0BE323C7CB091349B0964 PUSH20 0x6F6C634300080900330000000000000000000000 ",
          "sourceMap": "392:720:17:-:0;;;526:191;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;570:17:18;:38;;-1:-1:-1;;;;;;570:38:18;-1:-1:-1;;;;;570:38:18;;;;;;;;639:100;;-1:-1:-1;;;639:100:18;;-1:-1:-1;;;639:100:18;;;2159:52:21;570:38:18;;689:4:17;;695:6;;703:10;;639:36:18;;2132:18:21;;639:100:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;618:151;;;;-1:-1:-1;;;618:151:18;;;;;;2706:2:21;2688:21;;;2745:1;2725:18;;;2718:29;-1:-1:-1;;;2778:2:21;2763:18;;2756:34;2822:2;2807:18;;2504:327;618:151:18;;;;;;;;;780:12;806:18;-1:-1:-1;;;;;798:40:18;953:10;981:4;1003:6;1027:10;852:199;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;852:199:18;;;;;;;;;;;;;;-1:-1:-1;;;;;852:199:18;-1:-1:-1;;;852:199:18;;;798:263;;;852:199;798:263;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;779:282;;;1079:7;1071:16;;;;;;560:534;418:676;;;;526:191:17;;;;392:720;;14:127:21;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:258;218:1;228:113;242:6;239:1;236:13;228:113;;;318:11;;;312:18;299:11;;;292:39;264:2;257:10;228:113;;;359:6;356:1;353:13;350:48;;;394:1;385:6;380:3;376:16;369:27;350:48;;146:258;;;:::o;409:686::-;463:5;516:3;509:4;501:6;497:17;493:27;483:55;;534:1;531;524:12;483:55;557:13;;-1:-1:-1;;;;;619:10:21;;;616:36;;;632:18;;:::i;:::-;707:2;701:9;675:2;761:13;;-1:-1:-1;;757:22:21;;;781:2;753:31;749:40;737:53;;;805:18;;;825:22;;;802:46;799:72;;;851:18;;:::i;:::-;891:10;887:2;880:22;926:2;918:6;911:18;972:3;965:4;960:2;952:6;948:15;944:26;941:35;938:55;;;989:1;986;979:12;938:55;1002:63;1062:2;1055:4;1047:6;1043:17;1036:4;1028:6;1024:17;1002:63;:::i;:::-;1083:6;409:686;-1:-1:-1;;;;;;409:686:21:o;1100:910::-;1235:6;1243;1251;1259;1312:3;1300:9;1291:7;1287:23;1283:33;1280:53;;;1329:1;1326;1319:12;1280:53;1355:16;;-1:-1:-1;;;;;1400:31:21;;1390:42;;1380:70;;1446:1;1443;1436:12;1380:70;1518:2;1503:18;;1497:25;1469:5;;-1:-1:-1;;;;;;1571:14:21;;;1568:34;;;1598:1;1595;1588:12;1568:34;1621:61;1674:7;1665:6;1654:9;1650:22;1621:61;:::i;:::-;1611:71;;1728:2;1717:9;1713:18;1707:25;1691:41;;1757:2;1747:8;1744:16;1741:36;;;1773:1;1770;1763:12;1741:36;;1796:63;1851:7;1840:8;1829:9;1825:24;1796:63;:::i;:::-;1786:73;;;1904:2;1893:9;1889:18;1883:25;1952:6;1943:7;1939:20;1930:7;1927:33;1917:61;;1974:1;1971;1964:12;1917:61;1100:910;;;;-1:-1:-1;1100:910:21;;-1:-1:-1;;1100:910:21:o;2222:277::-;2289:6;2342:2;2330:9;2321:7;2317:23;2313:32;2310:52;;;2358:1;2355;2348:12;2310:52;2390:9;2384:16;2443:5;2436:13;2429:21;2422:5;2419:32;2409:60;;2465:1;2462;2455:12;2409:60;2488:5;2222:277;-1:-1:-1;;;2222:277:21:o;2836:258::-;2878:3;2916:5;2910:12;2943:6;2938:3;2931:19;2959:63;3015:6;3008:4;3003:3;2999:14;2992:4;2985:5;2981:16;2959:63;:::i;:::-;3076:2;3055:15;-1:-1:-1;;3051:29:21;3042:39;;;;3083:4;3038:50;;2836:258;-1:-1:-1;;2836:258:21:o;3099:564::-;-1:-1:-1;;;;;3350:32:21;;3332:51;;3419:3;3414:2;3399:18;;3392:31;;;-1:-1:-1;;3446:46:21;;3472:19;;3464:6;3446:46;:::i;:::-;3540:9;3532:6;3528:22;3523:2;3512:9;3508:18;3501:50;3568:33;3594:6;3586;3568:33;:::i;:::-;3560:41;;;3649:6;3641;3637:19;3632:2;3621:9;3617:18;3610:47;3099:564;;;;;;;:::o;3668:274::-;3797:3;3835:6;3829:13;3851:53;3897:6;3892:3;3885:4;3877:6;3873:17;3851:53;:::i;:::-;3920:16;;;;;3668:274;-1:-1:-1;;3668:274:21:o;:::-;392:720:17;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@_2316": {
              "entryPoint": null,
              "id": 2316,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_2324": {
              "entryPoint": null,
              "id": 2324,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_burn_2236": {
              "entryPoint": 651,
              "id": 2236,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_fallback_2308": {
              "entryPoint": 307,
              "id": 2308,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_mint_2251": {
              "entryPoint": 735,
              "id": 2251,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@base_2224": {
              "entryPoint": null,
              "id": 2224,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@burn_2119": {
              "entryPoint": 357,
              "id": 2119,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@currentTokenId_2061": {
              "entryPoint": null,
              "id": 2061,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@mint_2103": {
              "entryPoint": 576,
              "id": 2103,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@nftImplementation_2145": {
              "entryPoint": null,
              "id": 2145,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@tokenURI_2131": {
              "entryPoint": 412,
              "id": 2131,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_string_memory_ptr": {
              "entryPoint": 1125,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 993,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_ERC721Base_$2653__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 1018,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "extract_byte_array_length": {
              "entryPoint": 1302,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 1361,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x41": {
              "entryPoint": 1103,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:3167:21",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:21",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "115:76:21",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "125:26:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "137:9:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "148:2:21",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "133:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "133:18:21"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "125:4:21"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "167:9:21"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "178:6:21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "160:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "160:25:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "160:25:21"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "84:9:21",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "95:6:21",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "106:4:21",
                        "type": ""
                      }
                    ],
                    "src": "14:177:21"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "266:110:21",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "312:16:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "321:1:21",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "324:1:21",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "314:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "314:12:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "314:12:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "287:7:21"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "296:9:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "283:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "283:23:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "308:2:21",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "279:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "279:32:21"
                          },
                          "nodeType": "YulIf",
                          "src": "276:52:21"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "337:33:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "360:9:21"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "347:12:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "347:23:21"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "337:6:21"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "232:9:21",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "243:7:21",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "255:6:21",
                        "type": ""
                      }
                    ],
                    "src": "196:180:21"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "502:476:21",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "512:12:21",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "522:2:21",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "516:2:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "540:9:21"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "551:2:21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "533:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "533:21:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "533:21:21"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "563:27:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "583:6:21"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "577:5:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "577:13:21"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "567:6:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "610:9:21"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "621:2:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "606:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "606:18:21"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "626:6:21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "599:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "599:34:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "599:34:21"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "642:10:21",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "651:1:21",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "646:1:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "711:90:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "740:9:21"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "751:1:21"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "736:3:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "736:17:21"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "755:2:21",
                                          "type": "",
                                          "value": "64"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "732:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "732:26:21"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "value0",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "774:6:21"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "782:1:21"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "770:3:21"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "770:14:21"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "786:2:21"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "766:3:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "766:23:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "760:5:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "760:30:21"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "725:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "725:66:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "725:66:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "672:1:21"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "675:6:21"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "669:2:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "669:13:21"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "683:19:21",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "685:15:21",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "694:1:21"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "697:2:21"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "690:3:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "690:10:21"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "685:1:21"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "665:3:21",
                            "statements": []
                          },
                          "src": "661:140:21"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "835:66:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "864:9:21"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "875:6:21"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "860:3:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "860:22:21"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "884:2:21",
                                          "type": "",
                                          "value": "64"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "856:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "856:31:21"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "889:1:21",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "849:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "849:42:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "849:42:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "816:1:21"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "819:6:21"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "813:2:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "813:13:21"
                          },
                          "nodeType": "YulIf",
                          "src": "810:91:21"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "910:62:21",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "926:9:21"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "945:6:21"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "953:2:21",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "941:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "941:15:21"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "962:2:21",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "958:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "958:7:21"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "937:3:21"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "937:29:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "922:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "922:45:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "969:2:21",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "918:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "918:54:21"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "910:4:21"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "471:9:21",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "482:6:21",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "493:4:21",
                        "type": ""
                      }
                    ],
                    "src": "381:597:21"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1015:95:21",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1032:1:21",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1039:3:21",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1044:10:21",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "1035:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1035:20:21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1025:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1025:31:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1025:31:21"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1072:1:21",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1075:4:21",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1065:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1065:15:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1065:15:21"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1096:1:21",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1099:4:21",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "1089:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1089:15:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1089:15:21"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "983:127:21"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1195:842:21",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1241:16:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1250:1:21",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1253:1:21",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1243:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1243:12:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1243:12:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1216:7:21"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1225:9:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1212:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1212:23:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1237:2:21",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1208:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1208:32:21"
                          },
                          "nodeType": "YulIf",
                          "src": "1205:52:21"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1266:37:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1293:9:21"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1280:12:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1280:23:21"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "1270:6:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1312:28:21",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1322:18:21",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1316:2:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1367:16:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1376:1:21",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1379:1:21",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1369:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1369:12:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1369:12:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1355:6:21"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1363:2:21"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1352:2:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1352:14:21"
                          },
                          "nodeType": "YulIf",
                          "src": "1349:34:21"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1392:32:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1406:9:21"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1417:6:21"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1402:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1402:22:21"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "1396:2:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1472:16:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1481:1:21",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1484:1:21",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1474:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1474:12:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1474:12:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "1451:2:21"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1455:4:21",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1447:3:21"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1447:13:21"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1462:7:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1443:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1443:27:21"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1436:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1436:35:21"
                          },
                          "nodeType": "YulIf",
                          "src": "1433:55:21"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1497:26:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1520:2:21"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1507:12:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1507:16:21"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "1501:2:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1546:22:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1548:16:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1548:18:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1548:18:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "1538:2:21"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1542:2:21"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1535:2:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1535:10:21"
                          },
                          "nodeType": "YulIf",
                          "src": "1532:36:21"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1577:17:21",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1591:2:21",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "1587:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1587:7:21"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "1581:2:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1603:23:21",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1623:2:21",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1617:5:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1617:9:21"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "1607:6:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1635:71:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1657:6:21"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_3",
                                                "nodeType": "YulIdentifier",
                                                "src": "1681:2:21"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1685:4:21",
                                                "type": "",
                                                "value": "0x1f"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "1677:3:21"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1677:13:21"
                                          },
                                          {
                                            "name": "_4",
                                            "nodeType": "YulIdentifier",
                                            "src": "1692:2:21"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "1673:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1673:22:21"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1697:2:21",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1669:3:21"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1669:31:21"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "1702:2:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1665:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1665:40:21"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1653:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1653:53:21"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "1639:10:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1765:22:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1767:16:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1767:18:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1767:18:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1724:10:21"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1736:2:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1721:2:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1721:18:21"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1744:10:21"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1756:6:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1741:2:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1741:22:21"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "1718:2:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1718:46:21"
                          },
                          "nodeType": "YulIf",
                          "src": "1715:72:21"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1803:2:21",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "1807:10:21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1796:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1796:22:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1796:22:21"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1834:6:21"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "1842:2:21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1827:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1827:18:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1827:18:21"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1891:16:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1900:1:21",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1903:1:21",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1893:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1893:12:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1893:12:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "1868:2:21"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "1872:2:21"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1864:3:21"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1864:11:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1877:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1860:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1860:20:21"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1882:7:21"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1857:2:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1857:33:21"
                          },
                          "nodeType": "YulIf",
                          "src": "1854:53:21"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1933:6:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1941:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1929:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1929:15:21"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "1950:2:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1954:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1946:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1946:11:21"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "1959:2:21"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "1916:12:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1916:46:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1916:46:21"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "1986:6:21"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "1994:2:21"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1982:3:21"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1982:15:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1999:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1978:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1978:24:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2004:1:21",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1971:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1971:35:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1971:35:21"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2015:16:21",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "2025:6:21"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2015:6:21"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1161:9:21",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1172:7:21",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1184:6:21",
                        "type": ""
                      }
                    ],
                    "src": "1115:922:21"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2162:102:21",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2172:26:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2184:9:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2195:2:21",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2180:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2180:18:21"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2172:4:21"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2214:9:21"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2229:6:21"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2245:3:21",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2250:1:21",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "2241:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2241:11:21"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2254:1:21",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "2237:3:21"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2237:19:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2225:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2225:32:21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2207:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2207:51:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2207:51:21"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_ERC721Base_$2653__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2131:9:21",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2142:6:21",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2153:4:21",
                        "type": ""
                      }
                    ],
                    "src": "2042:222:21"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2324:325:21",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2334:22:21",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2348:1:21",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "2351:4:21"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "2344:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2344:12:21"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "2334:6:21"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2365:38:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "2395:4:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2401:1:21",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2391:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2391:12:21"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "2369:18:21",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2442:31:21",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "2444:27:21",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "2458:6:21"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2466:4:21",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "2454:3:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2454:17:21"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "2444:6:21"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "2422:18:21"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2415:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2415:26:21"
                          },
                          "nodeType": "YulIf",
                          "src": "2412:61:21"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2532:111:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2553:1:21",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2560:3:21",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2565:10:21",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "2556:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2556:20:21"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2546:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2546:31:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2546:31:21"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2597:1:21",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2600:4:21",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2590:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2590:15:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2590:15:21"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2625:1:21",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2628:4:21",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2618:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2618:15:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2618:15:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "2488:18:21"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "2511:6:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2519:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2508:2:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2508:14:21"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "2485:2:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2485:38:21"
                          },
                          "nodeType": "YulIf",
                          "src": "2482:161:21"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "2304:4:21",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "2313:6:21",
                        "type": ""
                      }
                    ],
                    "src": "2269:380:21"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2701:185:21",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2740:111:21",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2761:1:21",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2768:3:21",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2773:10:21",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "2764:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2764:20:21"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2754:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2754:31:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2754:31:21"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2805:1:21",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2808:4:21",
                                      "type": "",
                                      "value": "0x11"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2798:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2798:15:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2798:15:21"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2833:1:21",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2836:4:21",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2826:6:21"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2826:15:21"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2826:15:21"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2717:5:21"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2728:1:21",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "2724:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2724:6:21"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "2714:2:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2714:17:21"
                          },
                          "nodeType": "YulIf",
                          "src": "2711:140:21"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2860:20:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2871:5:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2878:1:21",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2867:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2867:13:21"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "2860:3:21"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2683:5:21",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "2693:3:21",
                        "type": ""
                      }
                    ],
                    "src": "2654:232:21"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3020:145:21",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3030:26:21",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3042:9:21"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3053:2:21",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3038:3:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3038:18:21"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3030:4:21"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3072:9:21"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "3087:6:21"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3103:3:21",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3108:1:21",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "3099:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3099:11:21"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3112:1:21",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3095:3:21"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3095:19:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3083:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3083:32:21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3065:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3065:51:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3065:51:21"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3136:9:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3147:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3132:3:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3132:18:21"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "3152:6:21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3125:6:21"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3125:34:21"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3125:34:21"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2981:9:21",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2992:6:21",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3000:6:21",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3011:4:21",
                        "type": ""
                      }
                    ],
                    "src": "2891:274:21"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value0 := memPtr\n    }\n    function abi_encode_tuple_t_contract$_ERC721Base_$2653__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n}",
              "id": 21,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "60806040526004361061004d5760003560e01c80629a9b7b1461006157806342966c681461008c578063c87b56dd146100ac578063d85d3d27146100d9578063f61ac58b146100f957610057565b3661005757600080fd5b61005f610133565b005b34801561006d57600080fd5b50610079620186a15481565b6040519081526020015b60405180910390f35b34801561009857600080fd5b5061005f6100a73660046103e1565b610165565b3480156100b857600080fd5b506100cc6100c73660046103e1565b61019c565b60405161008391906103fa565b3480156100e557600080fd5b5061005f6100f4366004610465565b610240565b34801561010557600080fd5b50620186a05461011b906001600160a01b031681565b6040516001600160a01b039091168152602001610083565b620186a0546001600160a01b03163660008037600080366000845af43d6000803e808015610160573d6000f35b3d6000fd5b61016e8161028b565b6040805160208082018084526000808452858152620186a290925292902090516101989290610348565b5050565b6000818152620186a2602052604090208054606091906101bb90610516565b80601f01602080910402602001604051908101604052809291908181526020018280546101e790610516565b80156102345780601f1061020957610100808354040283529160200191610234565b820191906000526020600020905b81548152906001019060200180831161021757829003601f168201915b50505050509050919050565b620186a1546000908152620186a260209081526040909120825161026692840190610348565b50620186a1805461028891339190600061027f83610551565b919050556102df565b50565b604051630852cd8d60e31b81526004810182905230906342966c6890602401600060405180830381600087803b1580156102c457600080fd5b505af11580156102d8573d6000803e3d6000fd5b5050505050565b306040516340c10f1960e01b81526001600160a01b0384811660048301526024820184905291909116906340c10f1990604401600060405180830381600087803b15801561032c57600080fd5b505af1158015610340573d6000803e3d6000fd5b505050505050565b82805461035490610516565b90600052602060002090601f01602090048101928261037657600085556103bc565b82601f1061038f57805160ff19168380011785556103bc565b828001600101855582156103bc579182015b828111156103bc5782518255916020019190600101906103a1565b506103c89291506103cc565b5090565b5b808211156103c857600081556001016103cd565b6000602082840312156103f357600080fd5b5035919050565b600060208083528351808285015260005b818110156104275785810183015185820160400152820161040b565b81811115610439576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561047757600080fd5b813567ffffffffffffffff8082111561048f57600080fd5b818401915084601f8301126104a357600080fd5b8135818111156104b5576104b561044f565b604051601f8201601f19908116603f011681019083821181831017156104dd576104dd61044f565b816040528281528760208487010111156104f657600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061052a57607f821691505b6020821081141561054b57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561057357634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212202242f08a4b0d79051330c6b85ab9983de3f5121f55dae0be323c7cb091349b0964736f6c63430008090033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x9A9B7B EQ PUSH2 0x61 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0xAC JUMPI DUP1 PUSH4 0xD85D3D27 EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0xF61AC58B EQ PUSH2 0xF9 JUMPI PUSH2 0x57 JUMP JUMPDEST CALLDATASIZE PUSH2 0x57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5F PUSH2 0x133 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x79 PUSH3 0x186A1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F PUSH2 0xA7 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E1 JUMP JUMPDEST PUSH2 0x165 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCC PUSH2 0xC7 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E1 JUMP JUMPDEST PUSH2 0x19C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x3FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F PUSH2 0xF4 CALLDATASIZE PUSH1 0x4 PUSH2 0x465 JUMP JUMPDEST PUSH2 0x240 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x186A0 SLOAD PUSH2 0x11B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x83 JUMP JUMPDEST PUSH3 0x186A0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0x160 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x16E DUP2 PUSH2 0x28B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP1 DUP5 MSTORE PUSH1 0x0 DUP1 DUP5 MSTORE DUP6 DUP2 MSTORE PUSH3 0x186A2 SWAP1 SWAP3 MSTORE SWAP3 SWAP1 KECCAK256 SWAP1 MLOAD PUSH2 0x198 SWAP3 SWAP1 PUSH2 0x348 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH3 0x186A2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x1BB SWAP1 PUSH2 0x516 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1E7 SWAP1 PUSH2 0x516 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x234 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x209 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x234 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x217 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x186A1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH3 0x186A2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP3 MLOAD PUSH2 0x266 SWAP3 DUP5 ADD SWAP1 PUSH2 0x348 JUMP JUMPDEST POP PUSH3 0x186A1 DUP1 SLOAD PUSH2 0x288 SWAP2 CALLER SWAP2 SWAP1 PUSH1 0x0 PUSH2 0x27F DUP4 PUSH2 0x551 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE PUSH2 0x2DF JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x852CD8D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE ADDRESS SWAP1 PUSH4 0x42966C68 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST ADDRESS PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x340 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x354 SWAP1 PUSH2 0x516 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x376 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x3BC JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x38F JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x3BC JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x3BC JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x3BC JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x3A1 JUMP JUMPDEST POP PUSH2 0x3C8 SWAP3 SWAP2 POP PUSH2 0x3CC JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x3C8 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3CD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x427 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x40B JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x439 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x477 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x48F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x4B5 JUMPI PUSH2 0x4B5 PUSH2 0x44F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x4DD JUMPI PUSH2 0x4DD PUSH2 0x44F JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x4F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP3 DUP2 ADD PUSH1 0x20 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x52A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x54B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x573 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 TIMESTAMP CREATE DUP11 0x4B 0xD PUSH26 0x51330C6B85AB9983DE3F5121F55DAE0BE323C7CB091349B0964 PUSH20 0x6F6C634300080900330000000000000000000000 ",
          "sourceMap": "392:720:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3477:8:18;;;392:720:17;3348:11:18;:9;:11::i;:::-;392:720:17;445:29;;;;;;;;;;;;;;;;;;;160:25:21;;;148:2;133:18;445:29:17;;;;;;;;881:105;;;;;;;;;;-1:-1:-1;881:105:17;;;;;:::i;:::-;;:::i;992:118::-;;;;;;;;;;-1:-1:-1;992:118:17;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;723:152::-;;;;;;;;;;-1:-1:-1;723:152:17;;;;;:::i;:::-;;:::i;376:35:18:-;;;;;;;;;;-1:-1:-1;376:35:18;;;;-1:-1:-1;;;;;376:35:18;;;;;;-1:-1:-1;;;;;2225:32:21;;;2207:51;;2195:2;2180:18;376:35:18;2042:222:21;2190:915:18;2261:17;;-1:-1:-1;;;;;2261:17:18;2558:14;2238:12;;2539:34;2762:1;2759;2743:14;2740:1;2734:4;2727:5;2714:50;2838:16;2835:1;2832;2817:38;2876:6;2943:66;;;;3058:16;3055:1;3048:27;2943:66;2978:16;2975:1;2968:27;881:105:17;929:14;935:7;929:5;:14::i;:::-;953:26;;;;;;;;;;-1:-1:-1;953:26:17;;;:21;;;:12;:21;;;;;;:26;;;;;;:::i;:::-;;881:105;:::o;992:118::-;1082:21;;;;:12;:21;;;;;1075:28;;1050:13;;1082:21;1075:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;992:118;;;:::o;723:152::-;794:14;;781:28;;;;:12;:28;;;;;;;;:42;;;;;;;;:::i;:::-;-1:-1:-1;851:14:17;:16;;833:35;;839:10;;851:16;:14;:16;;;:::i;:::-;;;;;833:5;:35::i;:::-;723:152;:::o;1367:68:18:-;1413:15;;-1:-1:-1;;;1413:15:18;;;;;160:25:21;;;1292:4:18;;1413:11;;133:18:21;;1413:15:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1367:68;:::o;1441:84::-;1292:4;1499:19;;-1:-1:-1;;;1499:19:18;;-1:-1:-1;;;;;3083:32:21;;;1499:19:18;;;3065:51:21;3132:18;;;3125:34;;;1499:11:18;;;;;;;3038:18:21;;1499:19:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1441:84;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;196:180:21;255:6;308:2;296:9;287:7;283:23;279:32;276:52;;;324:1;321;314:12;276:52;-1:-1:-1;347:23:21;;196:180;-1:-1:-1;196:180:21:o;381:597::-;493:4;522:2;551;540:9;533:21;583:6;577:13;626:6;621:2;610:9;606:18;599:34;651:1;661:140;675:6;672:1;669:13;661:140;;;770:14;;;766:23;;760:30;736:17;;;755:2;732:26;725:66;690:10;;661:140;;;819:6;816:1;813:13;810:91;;;889:1;884:2;875:6;864:9;860:22;856:31;849:42;810:91;-1:-1:-1;962:2:21;941:15;-1:-1:-1;;937:29:21;922:45;;;;969:2;918:54;;381:597;-1:-1:-1;;;381:597:21:o;983:127::-;1044:10;1039:3;1035:20;1032:1;1025:31;1075:4;1072:1;1065:15;1099:4;1096:1;1089:15;1115:922;1184:6;1237:2;1225:9;1216:7;1212:23;1208:32;1205:52;;;1253:1;1250;1243:12;1205:52;1293:9;1280:23;1322:18;1363:2;1355:6;1352:14;1349:34;;;1379:1;1376;1369:12;1349:34;1417:6;1406:9;1402:22;1392:32;;1462:7;1455:4;1451:2;1447:13;1443:27;1433:55;;1484:1;1481;1474:12;1433:55;1520:2;1507:16;1542:2;1538;1535:10;1532:36;;;1548:18;;:::i;:::-;1623:2;1617:9;1591:2;1677:13;;-1:-1:-1;;1673:22:21;;;1697:2;1669:31;1665:40;1653:53;;;1721:18;;;1741:22;;;1718:46;1715:72;;;1767:18;;:::i;:::-;1807:10;1803:2;1796:22;1842:2;1834:6;1827:18;1882:7;1877:2;1872;1868;1864:11;1860:20;1857:33;1854:53;;;1903:1;1900;1893:12;1854:53;1959:2;1954;1950;1946:11;1941:2;1933:6;1929:15;1916:46;2004:1;1982:15;;;1999:2;1978:24;1971:35;;;;-1:-1:-1;1986:6:21;1115:922;-1:-1:-1;;;;;1115:922:21:o;2269:380::-;2348:1;2344:12;;;;2391;;;2412:61;;2466:4;2458:6;2454:17;2444:27;;2412:61;2519:2;2511:6;2508:14;2488:18;2485:38;2482:161;;;2565:10;2560:3;2556:20;2553:1;2546:31;2600:4;2597:1;2590:15;2628:4;2625:1;2618:15;2482:161;;2269:380;;;:::o;2654:232::-;2693:3;-1:-1:-1;;2714:17:21;;2711:140;;;2773:10;2768:3;2764:20;2761:1;2754:31;2808:4;2805:1;2798:15;2836:4;2833:1;2826:15;2711:140;-1:-1:-1;2878:1:21;2867:13;;2654:232::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "291200",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "": "infinite",
            "burn(uint256)": "infinite",
            "currentTokenId()": "2262",
            "mint(string)": "infinite",
            "nftImplementation()": "2403",
            "tokenURI(uint256)": "infinite"
          }
        },
        "methodIdentifiers": {
          "burn(uint256)": "42966c68",
          "currentTokenId()": "009a9b7b",
          "mint(string)": "d85d3d27",
          "nftImplementation()": "f61ac58b",
          "tokenURI(uint256)": "c87b56dd"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC721Base\",\"name\":\"baseFactory\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"royaltyBps\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftMetadata\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftImplementation\",\"outputs\":[{\"internalType\":\"contract ERC721Base\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This custom NFT contract stores additional metadata to use for tokenURI\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ChildNFTOnChainData.sol\":\"ChildNFTOnChainData\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x70994ca77f6dce93193d744ed99add51b57aef3e56d42b90889f6a2b1444b6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa22a7520aa91e00d994a8fc0c6e17df8331c3224d87a9079ae8b1a97644cbbbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xf4059b28b9d7c342804d33b16ea30c65ca6afd560e426b44ca727a0343c04c68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x56f89378fca44345fe8de632c70311052c39d64a7a710513316676d343380e68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6dd43e44dbaad99d1863be7f2837085f361efdcb1fde5a9bf84c4efa07f89ed3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"contracts/ChildNFTOnChainData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport {DelegatedLogic} from \\\"./DelegatedLogic.sol\\\";\\nimport {IBaseInterface} from \\\"./IBaseInterface.sol\\\";\\nimport {ERC721Base} from \\\"./ERC721Base.sol\\\";\\n\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\n\\n/// This custom NFT contract stores additional metadata to use for tokenURI\\ncontract ChildNFTOnChainData is DelegatedLogic {\\n    uint256 public currentTokenId;\\n    mapping(uint256 => string) metadataJson;\\n\\n    constructor(\\n        ERC721Base baseFactory,\\n        string memory name,\\n        string memory symbol,\\n        uint16 royaltyBps\\n    ) DelegatedLogic(baseFactory, name, symbol, royaltyBps) {}\\n\\n    function mint(string memory nftMetadata) public {\\n        metadataJson[currentTokenId] = nftMetadata;\\n        _mint(msg.sender, currentTokenId++);\\n    }\\n\\n    function burn(uint256 tokenId) public {\\n        _burn(tokenId);\\n        metadataJson[tokenId] = \\\"\\\";\\n    }\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\\n        return metadataJson[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x715b493e86495b6e9004afed83263314c88b9e516510fe87e73deb98dc7c3a06\",\"license\":\"GPL-3.0\"},\"contracts/DelegatedLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport {IBaseInterface} from \\\"./IBaseInterface.sol\\\";\\nimport {ERC721Base} from \\\"./ERC721Base.sol\\\";\\n\\ncontract DelegatedLogic {\\n    // Important: gives storage space to ERC721Base by shifting\\n    // all local contract storage down.\\n    uint256[100000] private ______gap;\\n    // Reference to base NFT implementation\\n    ERC721Base public nftImplementation;\\n\\n    constructor(\\n        ERC721Base _nftImplementation,\\n        string memory name,\\n        string memory symbol,\\n        uint16 royaltyBps\\n    ) {\\n        nftImplementation = _nftImplementation;\\n        require(\\n            _nftImplementation.supportsInterface(\\n                type(IBaseInterface).interfaceId\\n            ),\\n            \\\"!api\\\"\\n        );\\n        (bool success, ) = address(_nftImplementation).delegatecall(\\n            abi.encodeWithSignature(\\n                \\\"initialize(address,string,string,uint16)\\\",\\n                msg.sender,\\n                name,\\n                symbol,\\n                royaltyBps\\n            )\\n        );\\n        require(success);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == base().owner(), \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function base() internal view returns (ERC721Base) {\\n        return ERC721Base(address(this));\\n    }\\n\\n    // helpers to mimic Openzeppelin internal functions\\n    function _burn(uint256 id) internal {\\n        base().burn(id);\\n    }\\n\\n    function _mint(address to, uint256 id) internal {\\n        base().mint(to, id);\\n    }\\n\\n    function _exists(uint256 id) internal view returns (bool) {\\n        return base().exists(id);\\n    }\\n\\n    function _isApprovedOrOwner(address operator, uint256 id)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return base().isApprovedOrOwner(operator, id);\\n    }\\n\\n    /// Set the base URI of the contract. Allowed only by parent contract\\n    function _setBaseURI(string memory newUri) internal {\\n        base().setBaseURI(newUri);\\n    }\\n\\n    /**\\n     * @dev Delegates the current call to nftImplementation.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        address impl = address(nftImplementation);\\n\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev No base NFT functions receive any value\\n     */\\n    receive() external payable {\\n        revert();\\n    }\\n}\\n\",\"keccak256\":\"0x0a7aaec6e12c86b28c196552958920481190a7eaff8936e41d302003d96f28fe\",\"license\":\"GPL-3.0\"},\"contracts/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {IBaseInterface} from \\\"./IBaseInterface.sol\\\";\\nimport {ClonesUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\n\\n/**\\n    This smart contract adds features and allows for a ownership only by another smart contract as fallback behavior\\n    while also implementing all normal ERC721 functions as expected\\n*/\\ncontract ERC721Base is\\n    ERC721Upgradeable,\\n    IBaseInterface,\\n    IERC2981Upgradeable,\\n    OwnableUpgradeable\\n{\\n    modifier onlyInternal() {\\n        require(msg.sender == address(this), \\\"Only internal\\\");\\n        _;\\n    }\\n\\n    uint256 public immutable deployedBlock;\\n\\n    uint256 private minted;\\n    uint16 public royaltyBps;\\n    string private baseURI;\\n\\n    constructor() {\\n        // Can be used to verify contract implementation is correct at address\\n        deployedBlock = block.number;\\n    }\\n\\n    /**\\n      @dev Function to create a new edition. Can only be called by the allowed creator\\n           Sets the only allowed minter to the address that creates/owns the edition.\\n           This can be re-assigned or updated later\\n     */\\n    function initialize(\\n        address newOwner,\\n        string memory _name,\\n        string memory _symbol,\\n        uint16 _royaltyBps\\n    ) public initializer {\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n\\n        transferOwnership(newOwner);\\n\\n        royaltyBps = _royaltyBps;\\n    }\\n\\n    function isApprovedForAll(address _owner, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            ERC721Upgradeable.isApprovedForAll(_owner, operator) ||\\n            operator == address(this);\\n    }\\n\\n    function setBaseURI(string memory _baseURI) public override onlyInternal {\\n        baseURI = _baseURI;\\n    }\\n\\n    /// @dev returns the number of minted tokens\\n    /// uses some extra gas but makes etherscan and users happy so :shrug:\\n    /// partial erc721enumerable implemntation\\n    function totalSupply() public view returns (uint256) {\\n        return minted;\\n    }\\n\\n    /**\\n      @param to address to send the newly minted edition to\\n      @dev This mints one edition to the given address by an allowed minter on the edition instance.\\n     */\\n    function mint(address to, uint256 tokenId) external override onlyInternal {\\n        _mint(to, tokenId);\\n        minted += 1;\\n    }\\n\\n    /**\\n        @param tokenId Token ID to burn\\n        User burn function for token id \\n     */\\n    function burn(uint256 tokenId) public override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not allowed\\\");\\n        _burn(tokenId);\\n        minted -= 1;\\n    }\\n\\n    /**\\n        Simple override for owner interface.\\n     */\\n    function owner()\\n        public\\n        view\\n        override(OwnableUpgradeable, IBaseInterface)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    /**\\n        @dev Get royalty information for token\\n        @param _salePrice Sale price for the token\\n     */\\n    function royaltyInfo(uint256, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        if (owner() == address(0x0)) {\\n            return (owner(), 0);\\n        }\\n        return (owner(), (_salePrice * royaltyBps) / 10_000);\\n    }\\n\\n    /**\\n        @dev Get URI for given token id\\n        @param tokenId token id to get uri for\\n        @return base64-encoded json metadata object\\n    */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"No token\\\");\\n\\n        return\\n            string(\\n                abi.encodePacked(baseURI, StringsUpgradeable.toString(tokenId))\\n            );\\n    }\\n\\n    function exists(uint256 tokenId) external view override returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    function isApprovedOrOwner(address spender, uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        // contract itself has admin capabilities\\n        return\\n            _isApprovedOrOwner(spender, tokenId) || msg.sender == address(this);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            type(IBaseInterface).interfaceId == interfaceId ||\\n            ERC721Upgradeable.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x98f27f4407fd2983467ec4885829df7d98a05b30afddacc13cbd5f05b327bf6d\",\"license\":\"GPL-3.0\"},\"contracts/IBaseInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\n/// Additional features and functions assigned to the\\n/// Base721 contract for hooks and overrides\\ninterface IBaseInterface {\\n    /*\\n     Exposing common NFT internal functionality for base contract overrides\\n     To save gas and make API cleaner this is only for new functionality not exposed in\\n     the core ERC721 contract\\n    */\\n\\n    /// Mint an NFT. Allowed only by the parent contract\\n    function burn(uint256 tokenId) external;\\n\\n    /// Mint an NFT. Allowed only by the parent contract\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// Set the base URI of the contract. Allowed only by parent contract\\n    function setBaseURI(string memory) external;\\n\\n    // /* Exposes common internal read features for public use */\\n\\n    // /// Token exists\\n\\n    // /// @param tokenId token id to see if it exists\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    // /// Simple approval for operation check on token for address\\n    // /// @param spender address spending/changing token\\n    // /// @param tokenId tokenID to change / operate on\\n    function isApprovedOrOwner(address spender, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe1617e449e3f983a5ed7b55ad867f7f708667a742131bc5924a71ccc88131640\",\"license\":\"GPL-3.0\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 2142,
            "contract": "contracts/ChildNFTOnChainData.sol:ChildNFTOnChainData",
            "label": "______gap",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)100000_storage"
          },
          {
            "astId": 2145,
            "contract": "contracts/ChildNFTOnChainData.sol:ChildNFTOnChainData",
            "label": "nftImplementation",
            "offset": 0,
            "slot": "100000",
            "type": "t_contract(ERC721Base)2653"
          },
          {
            "astId": 2061,
            "contract": "contracts/ChildNFTOnChainData.sol:ChildNFTOnChainData",
            "label": "currentTokenId",
            "offset": 0,
            "slot": "100001",
            "type": "t_uint256"
          },
          {
            "astId": 2065,
            "contract": "contracts/ChildNFTOnChainData.sol:ChildNFTOnChainData",
            "label": "metadataJson",
            "offset": 0,
            "slot": "100002",
            "type": "t_mapping(t_uint256,t_string_storage)"
          }
        ],
        "types": {
          "t_array(t_uint256)100000_storage": {
            "base": "t_uint256",
            "encoding": "inplace",
            "label": "uint256[100000]",
            "numberOfBytes": "3200000"
          },
          "t_contract(ERC721Base)2653": {
            "encoding": "inplace",
            "label": "contract ERC721Base",
            "numberOfBytes": "20"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32",
            "value": "t_string_storage"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "notice": "This custom NFT contract stores additional metadata to use for tokenURI",
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/ChildNFT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport {DelegatedLogic} from \\\"./DelegatedLogic.sol\\\";\\nimport {ERC721Base} from \\\"./ERC721Base.sol\\\";\\n\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\n\\n// this is the custom implementation logic and all the user has to deploy\\ncontract ChildNFT is DelegatedLogic {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    CountersUpgradeable.Counter public atId;\\n\\n    constructor(\\n        ERC721Base baseFactory,\\n        string memory name,\\n        string memory symbol,\\n        uint16 royaltyBps\\n    ) DelegatedLogic(baseFactory, name, symbol, royaltyBps) {}\\n\\n    function setup(string memory) public onlyOwner {\\n        base().setBaseURI(\\\"http://asdf.cmo/\\\");\\n    }\\n\\n    // How minting works\\n    function mint() external onlyOwner {\\n        base().mint(msg.sender, atId.current());\\n        atId.increment();\\n    }\\n}\\n\"\n    },\n    \"contracts/DelegatedLogic.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport {IBaseInterface} from \\\"./IBaseInterface.sol\\\";\\nimport {ERC721Base} from \\\"./ERC721Base.sol\\\";\\n\\ncontract DelegatedLogic {\\n    // Important: gives storage space to ERC721Base by shifting\\n    // all local contract storage down.\\n    uint256[100000] private ______gap;\\n    // Reference to base NFT implementation\\n    ERC721Base public nftImplementation;\\n\\n    constructor(\\n        ERC721Base _nftImplementation,\\n        string memory name,\\n        string memory symbol,\\n        uint16 royaltyBps\\n    ) {\\n        nftImplementation = _nftImplementation;\\n        require(\\n            _nftImplementation.supportsInterface(\\n                type(IBaseInterface).interfaceId\\n            ),\\n            \\\"!api\\\"\\n        );\\n        (bool success, ) = address(_nftImplementation).delegatecall(\\n            abi.encodeWithSignature(\\n                \\\"initialize(address,string,string,uint16)\\\",\\n                msg.sender,\\n                name,\\n                symbol,\\n                royaltyBps\\n            )\\n        );\\n        require(success);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == base().owner(), \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function base() internal view returns (ERC721Base) {\\n        return ERC721Base(address(this));\\n    }\\n\\n    // helpers to mimic Openzeppelin internal functions\\n    function _burn(uint256 id) internal {\\n        base().burn(id);\\n    }\\n\\n    function _mint(address to, uint256 id) internal {\\n        base().mint(to, id);\\n    }\\n\\n    function _exists(uint256 id) internal view returns (bool) {\\n        return base().exists(id);\\n    }\\n\\n    function _isApprovedOrOwner(address operator, uint256 id)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return base().isApprovedOrOwner(operator, id);\\n    }\\n\\n    /// Set the base URI of the contract. Allowed only by parent contract\\n    function _setBaseURI(string memory newUri) internal {\\n        base().setBaseURI(newUri);\\n    }\\n\\n    /**\\n     * @dev Delegates the current call to nftImplementation.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        address impl = address(nftImplementation);\\n\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev No base NFT functions receive any value\\n     */\\n    receive() external payable {\\n        revert();\\n    }\\n}\\n\"\n    },\n    \"contracts/ERC721Base.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {IBaseInterface} from \\\"./IBaseInterface.sol\\\";\\nimport {ClonesUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\n\\n/**\\n    This smart contract adds features and allows for a ownership only by another smart contract as fallback behavior\\n    while also implementing all normal ERC721 functions as expected\\n*/\\ncontract ERC721Base is\\n    ERC721Upgradeable,\\n    IBaseInterface,\\n    IERC2981Upgradeable,\\n    OwnableUpgradeable\\n{\\n    modifier onlyInternal() {\\n        require(msg.sender == address(this), \\\"Only internal\\\");\\n        _;\\n    }\\n\\n    uint256 public immutable deployedBlock;\\n\\n    uint256 private minted;\\n    uint16 public royaltyBps;\\n    string private baseURI;\\n\\n    constructor() {\\n        // Can be used to verify contract implementation is correct at address\\n        deployedBlock = block.number;\\n    }\\n\\n    /**\\n      @dev Function to create a new edition. Can only be called by the allowed creator\\n           Sets the only allowed minter to the address that creates/owns the edition.\\n           This can be re-assigned or updated later\\n     */\\n    function initialize(\\n        address newOwner,\\n        string memory _name,\\n        string memory _symbol,\\n        uint16 _royaltyBps\\n    ) public initializer {\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n\\n        transferOwnership(newOwner);\\n\\n        royaltyBps = _royaltyBps;\\n    }\\n\\n    function isApprovedForAll(address _owner, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            ERC721Upgradeable.isApprovedForAll(_owner, operator) ||\\n            operator == address(this);\\n    }\\n\\n    function setBaseURI(string memory _baseURI) public override onlyInternal {\\n        baseURI = _baseURI;\\n    }\\n\\n    /// @dev returns the number of minted tokens\\n    /// uses some extra gas but makes etherscan and users happy so :shrug:\\n    /// partial erc721enumerable implemntation\\n    function totalSupply() public view returns (uint256) {\\n        return minted;\\n    }\\n\\n    /**\\n      @param to address to send the newly minted edition to\\n      @dev This mints one edition to the given address by an allowed minter on the edition instance.\\n     */\\n    function mint(address to, uint256 tokenId) external override onlyInternal {\\n        _mint(to, tokenId);\\n        minted += 1;\\n    }\\n\\n    /**\\n        @param tokenId Token ID to burn\\n        User burn function for token id \\n     */\\n    function burn(uint256 tokenId) public override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not allowed\\\");\\n        _burn(tokenId);\\n        minted -= 1;\\n    }\\n\\n    /**\\n        Simple override for owner interface.\\n     */\\n    function owner()\\n        public\\n        view\\n        override(OwnableUpgradeable, IBaseInterface)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    /**\\n        @dev Get royalty information for token\\n        @param _salePrice Sale price for the token\\n     */\\n    function royaltyInfo(uint256, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        if (owner() == address(0x0)) {\\n            return (owner(), 0);\\n        }\\n        return (owner(), (_salePrice * royaltyBps) / 10_000);\\n    }\\n\\n    /**\\n        @dev Get URI for given token id\\n        @param tokenId token id to get uri for\\n        @return base64-encoded json metadata object\\n    */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"No token\\\");\\n\\n        return\\n            string(\\n                abi.encodePacked(baseURI, StringsUpgradeable.toString(tokenId))\\n            );\\n    }\\n\\n    function exists(uint256 tokenId) external view override returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    function isApprovedOrOwner(address spender, uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        // contract itself has admin capabilities\\n        return\\n            _isApprovedOrOwner(spender, tokenId) || msg.sender == address(this);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            type(IBaseInterface).interfaceId == interfaceId ||\\n            ERC721Upgradeable.supportsInterface(interfaceId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\n    },\n    \"contracts/IBaseInterface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\n/// Additional features and functions assigned to the\\n/// Base721 contract for hooks and overrides\\ninterface IBaseInterface {\\n    /*\\n     Exposing common NFT internal functionality for base contract overrides\\n     To save gas and make API cleaner this is only for new functionality not exposed in\\n     the core ERC721 contract\\n    */\\n\\n    /// Mint an NFT. Allowed only by the parent contract\\n    function burn(uint256 tokenId) external;\\n\\n    /// Mint an NFT. Allowed only by the parent contract\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// Set the base URI of the contract. Allowed only by parent contract\\n    function setBaseURI(string memory) external;\\n\\n    // /* Exposes common internal read features for public use */\\n\\n    // /// Token exists\\n\\n    // /// @param tokenId token id to see if it exists\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    // /// Simple approval for operation check on token for address\\n    // /// @param spender address spending/changing token\\n    // /// @param tokenId tokenID to change / operate on\\n    function isApprovedOrOwner(address spender, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function owner() external view returns (address);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\"\n    },\n    \"contracts/ChildNFTOnChainData.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport {DelegatedLogic} from \\\"./DelegatedLogic.sol\\\";\\nimport {IBaseInterface} from \\\"./IBaseInterface.sol\\\";\\nimport {ERC721Base} from \\\"./ERC721Base.sol\\\";\\n\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\n\\n/// This custom NFT contract stores additional metadata to use for tokenURI\\ncontract ChildNFTOnChainData is DelegatedLogic {\\n    uint256 public currentTokenId;\\n    mapping(uint256 => string) metadataJson;\\n\\n    constructor(\\n        ERC721Base baseFactory,\\n        string memory name,\\n        string memory symbol,\\n        uint16 royaltyBps\\n    ) DelegatedLogic(baseFactory, name, symbol, royaltyBps) {}\\n\\n    function mint(string memory nftMetadata) public {\\n        metadataJson[currentTokenId] = nftMetadata;\\n        _mint(msg.sender, currentTokenId++);\\n    }\\n\\n    function burn(uint256 tokenId) public {\\n        _burn(tokenId);\\n        metadataJson[tokenId] = \\\"\\\";\\n    }\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\\n        return metadataJson[tokenId];\\n    }\\n}\\n\"\n    },\n    \"contracts/ChildNFTNoBurn.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport {DelegatedLogic} from \\\"./DelegatedLogic.sol\\\";\\nimport {IBaseInterface} from \\\"./IBaseInterface.sol\\\";\\nimport {ERC721Base} from \\\"./ERC721Base.sol\\\";\\n\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\n\\n/// This custom NFT contract is straight-forward\\n///   except for disabling the burn function by override\\n/// This uses the openzeppelin style solidity contract abi\\ncontract ChildNFTNoBurn is DelegatedLogic {\\n    constructor(\\n        ERC721Base baseFactory,\\n        string memory name,\\n        string memory symbol,\\n        uint16 royaltyBps\\n    ) DelegatedLogic(baseFactory, name, symbol, royaltyBps) {}\\n\\n    function setup() public onlyOwner {\\n        _setBaseURI(\\\"http://non-burnable.api/\\\");\\n        _mint(msg.sender, 0);\\n        _mint(msg.sender, 1);\\n        _mint(msg.sender, 2);\\n    }\\n\\n    function burn(uint256) external pure {\\n        revert(\\\"Burn not allowed\\\");\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 100\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "5ebfd5e2e0f56a95728923bf5c29bb48",
      "transactionHash": "0x918be8fc2cbde9906512767d39a95cb72b473ea0969892a68c2bff1d55ed7249",
      "args": [
        "0x3Be479A0e8D5732BE5051Bfe6833CC98722f2C1b",
        "TEST",
        "testing",
        1000
      ]
    },
    "decoded": {
      "from": "0x9444390c01Dd5b7249E53FAc31290F7dFF53450D",
      "gasPrice": "15382495074",
      "gasLimit": "532641",
      "to": null,
      "value": "0",
      "nonce": 330,
      "data": "0x60806040523480156200001157600080fd5b50604051620009d5380380620009d58339810160408190526200003491620002a9565b620186a080546001600160a01b0319166001600160a01b0386169081179091556040516301ffc9a760e01b815263d653026160e01b600482015285918591859185916301ffc9a79060240160206040518083038186803b1580156200009857600080fd5b505afa158015620000ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d391906200034e565b620001135760405162461bcd60e51b81526004016200010a906020808252600490820152632161706960e01b604082015260600190565b60405180910390fd5b6000846001600160a01b031633858585604051602401620001389493929190620003a7565b60408051601f198184030181529181526020820180516001600160e01b0316636f58bf9360e11b179052516200016f9190620003f7565b600060405180830381855af49150503d8060008114620001ac576040519150601f19603f3d011682016040523d82523d6000602084013e620001b1565b606091505b5050905080620001c057600080fd5b50505050505050505062000415565b634e487b7160e01b600052604160045260246000fd5b60005b8381101562000202578181015183820152602001620001e8565b8381111562000212576000848401525b50505050565b600082601f8301126200022a57600080fd5b81516001600160401b0380821115620002475762000247620001cf565b604051601f8301601f19908116603f01168101908282118183101715620002725762000272620001cf565b816040528381528660208588010111156200028c57600080fd5b6200029f846020830160208901620001e5565b9695505050505050565b60008060008060808587031215620002c057600080fd5b84516001600160a01b0381168114620002d857600080fd5b60208601519094506001600160401b0380821115620002f657600080fd5b620003048883890162000218565b945060408701519150808211156200031b57600080fd5b506200032a8782880162000218565b925050606085015161ffff811681146200034357600080fd5b939692955090935050565b6000602082840312156200036157600080fd5b815180151581146200037257600080fd5b9392505050565b6000815180845262000393816020860160208601620001e5565b601f01601f19169290920160200192915050565b6001600160a01b0385168152608060208201819052600090620003cd9083018662000379565b8281036040840152620003e1818662000379565b91505061ffff8316606083015295945050505050565b600082516200040b818460208701620001e5565b9190910192915050565b6105b080620004256000396000f3fe60806040526004361061004d5760003560e01c80629a9b7b1461006157806342966c681461008c578063c87b56dd146100ac578063d85d3d27146100d9578063f61ac58b146100f957610057565b3661005757600080fd5b61005f610133565b005b34801561006d57600080fd5b50610079620186a15481565b6040519081526020015b60405180910390f35b34801561009857600080fd5b5061005f6100a73660046103e1565b610165565b3480156100b857600080fd5b506100cc6100c73660046103e1565b61019c565b60405161008391906103fa565b3480156100e557600080fd5b5061005f6100f4366004610465565b610240565b34801561010557600080fd5b50620186a05461011b906001600160a01b031681565b6040516001600160a01b039091168152602001610083565b620186a0546001600160a01b03163660008037600080366000845af43d6000803e808015610160573d6000f35b3d6000fd5b61016e8161028b565b6040805160208082018084526000808452858152620186a290925292902090516101989290610348565b5050565b6000818152620186a2602052604090208054606091906101bb90610516565b80601f01602080910402602001604051908101604052809291908181526020018280546101e790610516565b80156102345780601f1061020957610100808354040283529160200191610234565b820191906000526020600020905b81548152906001019060200180831161021757829003601f168201915b50505050509050919050565b620186a1546000908152620186a260209081526040909120825161026692840190610348565b50620186a1805461028891339190600061027f83610551565b919050556102df565b50565b604051630852cd8d60e31b81526004810182905230906342966c6890602401600060405180830381600087803b1580156102c457600080fd5b505af11580156102d8573d6000803e3d6000fd5b5050505050565b306040516340c10f1960e01b81526001600160a01b0384811660048301526024820184905291909116906340c10f1990604401600060405180830381600087803b15801561032c57600080fd5b505af1158015610340573d6000803e3d6000fd5b505050505050565b82805461035490610516565b90600052602060002090601f01602090048101928261037657600085556103bc565b82601f1061038f57805160ff19168380011785556103bc565b828001600101855582156103bc579182015b828111156103bc5782518255916020019190600101906103a1565b506103c89291506103cc565b5090565b5b808211156103c857600081556001016103cd565b6000602082840312156103f357600080fd5b5035919050565b600060208083528351808285015260005b818110156104275785810183015185820160400152820161040b565b81811115610439576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561047757600080fd5b813567ffffffffffffffff8082111561048f57600080fd5b818401915084601f8301126104a357600080fd5b8135818111156104b5576104b561044f565b604051601f8201601f19908116603f011681019083821181831017156104dd576104dd61044f565b816040528281528760208487010111156104f657600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061052a57607f821691505b6020821081141561054b57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561057357634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212202242f08a4b0d79051330c6b85ab9983de3f5121f55dae0be323c7cb091349b0964736f6c634300080900330000000000000000000000003be479a0e8d5732be5051bfe6833cc98722f2c1b000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000000045445535400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000774657374696e6700000000000000000000000000000000000000000000000000",
      "r": "0xe05fe96a03a96dfb937135b83fe97cdd9379095e2b82c7d4aa0be4b6161cba4f",
      "s": "0x1e1cb4c41f7abd7157bea5d7b8b8d6b789e27f5c319563e0e4731a167bd42c67",
      "v": 0,
      "chainId": 4
    }
  }
}