{
  "address": "0x86c67a16C16BF784BdFE7D4b7575dB664D191F88",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "__burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "__exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "__isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "__isApprovedOrOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "__mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uriBase",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "uriExtension",
          "type": "string"
        }
      ],
      "name": "__setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "__tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "advancedConfig",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "royaltyBps",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "uriBase",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "uriExtension",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "hasTransferHook",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "royaltyBps",
              "type": "uint16"
            },
            {
              "internalType": "string",
              "name": "uriBase",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "uriExtension",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "hasTransferHook",
              "type": "bool"
            }
          ],
          "internalType": "struct ConfigSettings",
          "name": "settings",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x69a137a5c543d59736d5555a58173b8c86551747b327aed332111adb9310a1f5",
  "receipt": {
    "to": null,
    "from": "0x9444390c01Dd5b7249E53FAc31290F7dFF53450D",
    "contractAddress": "0x86c67a16C16BF784BdFE7D4b7575dB664D191F88",
    "transactionIndex": 57,
    "gasUsed": "2061532",
    "logsBloom": "0x
    "blockHash": "0xb76842bdffdf58920b3b0a47c23f77d0f1f813bc6bf51a38323b405e9bc1e8cc",
    "transactionHash": "0x69a137a5c543d59736d5555a58173b8c86551747b327aed332111adb9310a1f5",
    "logs": [],
    "blockNumber": 9786331,
    "cumulativeGasUsed": "21474687",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "96380f032a8f4abaf0d0c34b19efdc36",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"__burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"__exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"__isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"__isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"__mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uriBase\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uriExtension\",\"type\":\"string\"}],\"name\":\"__setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"__tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advancedConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"royaltyBps\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"uriBase\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uriExtension\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"hasTransferHook\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"royaltyBps\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"uriBase\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uriExtension\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"hasTransferHook\",\"type\":\"bool\"}],\"internalType\":\"struct ConfigSettings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"__mint(address,uint256)\":{\"details\":\"This mints one edition to the given address by an allowed minter on the edition instance.\",\"params\":{\"to\":\"address to send the newly minted NFT to\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"Token ID to burn User burn function for token id \"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"initialize(address,string,string,(uint16,string,string,bool))\":{\"params\":{\"_name\":\"name of NFT contract\",\"_symbol\":\"symbol of NFT contract\",\"newOwner\":\"Owner for the new derived nft\",\"settings\":\"configuration settings for uri, royalty, and hooks features\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"_salePrice\":\"sales price for token to determine royalty split\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interfaceId bytes4 to check support for\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"token id ot get uri for\"},\"returns\":{\"_0\":\"default uri getter functionality\"}},\"totalSupply()\":{\"details\":\"returns the number of minted tokens uses some extra gas but makes etherscan and users happy so :shrug: partial erc721enumerable implemntation\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"__burn(uint256)\":{\"notice\":\"Internal only\"},\"__exists(uint256)\":{\"notice\":\"Exposing token exists check for base contract\"},\"__isApprovedForAll(address,address)\":{\"notice\":\"internal getter for approval by all When isApprovedForAll is overridden, this can be used to call original impl\"},\"__isApprovedOrOwner(address,uint256)\":{\"notice\":\"Getter for approved or owner\"},\"__mint(address,uint256)\":{\"notice\":\"Internal-only\"},\"__owner()\":{\"notice\":\"internal alias for overrides\"},\"__setBaseURI(string,string)\":{\"notice\":\"Internal-only function to update the base uri\"},\"__tokenURI(uint256)\":{\"notice\":\"internal base override\"},\"constructor\":{\"notice\":\"Constructor called once when the base contract is deployed\"},\"deployedBlock()\":{\"notice\":\"on-chain record of when this contract was deployed\"},\"initialize(address,string,string,(uint16,string,string,bool))\":{\"notice\":\"Initializer that's called when a new child nft is setup\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Getter to expose appoval status to root contract\"},\"owner()\":{\"notice\":\"Simple override for owner interface.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"Get royalty information for token ignored token id to get royalty info. able to override and set per-token royalties\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165 getter\"},\"tokenURI(uint256)\":{\"notice\":\"Default simple token-uri implementation. works for ipfs folders too\"}},\"notice\":\"This smart contract adds features and allows for a ownership only by another smart contract as fallback behavior while also implementing all normal ERC721 functions as expected\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ERC721Base.sol\":\"ERC721Base\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x70994ca77f6dce93193d744ed99add51b57aef3e56d42b90889f6a2b1444b6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa22a7520aa91e00d994a8fc0c6e17df8331c3224d87a9079ae8b1a97644cbbbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x56f89378fca44345fe8de632c70311052c39d64a7a710513316676d343380e68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6dd43e44dbaad99d1863be7f2837085f361efdcb1fde5a9bf84c4efa07f89ed3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"contracts/base/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {IBaseERC721Interface} from \\\"./IBaseERC721Interface.sol\\\";\\n\\nstruct ConfigSettings {\\n    uint16 royaltyBps;\\n    string uriBase;\\n    string uriExtension;\\n    bool hasTransferHook;\\n}\\n\\n/**\\n    This smart contract adds features and allows for a ownership only by another smart contract as fallback behavior\\n    while also implementing all normal ERC721 functions as expected\\n*/\\ncontract ERC721Base is\\n    ERC721Upgradeable,\\n    IBaseERC721Interface,\\n    IERC2981Upgradeable,\\n    OwnableUpgradeable\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    // Minted counter for totalSupply()\\n    CountersUpgradeable.Counter private mintedCounter;\\n\\n    modifier onlyInternal() {\\n        require(msg.sender == address(this), \\\"Only internal\\\");\\n        _;\\n    }\\n\\n    /// on-chain record of when this contract was deployed\\n    uint256 public immutable deployedBlock;\\n\\n    ConfigSettings public advancedConfig;\\n\\n    /// Constructor called once when the base contract is deployed\\n    constructor() {\\n        // Can be used to verify contract implementation is correct at address\\n        deployedBlock = block.number;\\n    }\\n\\n    /// Initializer that's called when a new child nft is setup\\n    /// @param newOwner Owner for the new derived nft\\n    /// @param _name name of NFT contract\\n    /// @param _symbol symbol of NFT contract\\n    /// @param settings configuration settings for uri, royalty, and hooks features\\n    function initialize(\\n        address newOwner,\\n        string memory _name,\\n        string memory _symbol,\\n        ConfigSettings memory settings\\n    ) public initializer {\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n\\n        advancedConfig = settings;\\n\\n        transferOwnership(newOwner);\\n    }\\n\\n    /// Getter to expose appoval status to root contract\\n    function isApprovedForAll(address _owner, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            ERC721Upgradeable.isApprovedForAll(_owner, operator) ||\\n            operator == address(this);\\n    }\\n\\n    /// internal getter for approval by all\\n    /// When isApprovedForAll is overridden, this can be used to call original impl\\n    function __isApprovedForAll(address _owner, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return isApprovedForAll(_owner, operator);\\n    }\\n\\n    /// Hook that when enabled manually calls _beforeTokenTransfer on\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n        if (advancedConfig.hasTransferHook) {\\n            (bool success, ) = address(this).delegatecall(\\n                abi.encodeWithSignature(\\n                    \\\"_beforeTokenTransfer(address,address,uint256)\\\",\\n                    from,\\n                    to,\\n                    tokenId\\n                )\\n            );\\n            // Raise error again from result if error exists\\n            assembly {\\n                switch success\\n                // delegatecall returns 0 on error.\\n                case 0 {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n\\n    /// Internal-only function to update the base uri\\n    function __setBaseURI(string memory uriBase, string memory uriExtension)\\n        public\\n        override\\n        onlyInternal\\n    {\\n        advancedConfig.uriBase = uriBase;\\n        advancedConfig.uriExtension = uriExtension;\\n    }\\n\\n    /// @dev returns the number of minted tokens\\n    /// uses some extra gas but makes etherscan and users happy so :shrug:\\n    /// partial erc721enumerable implemntation\\n    function totalSupply() public view returns (uint256) {\\n        return mintedCounter.current();\\n    }\\n\\n    /**\\n      Internal-only\\n      @param to address to send the newly minted NFT to\\n      @dev This mints one edition to the given address by an allowed minter on the edition instance.\\n     */\\n    function __mint(address to, uint256 tokenId)\\n        external\\n        override\\n        onlyInternal\\n    {\\n        _mint(to, tokenId);\\n        mintedCounter.increment();\\n    }\\n\\n    /**\\n        @param tokenId Token ID to burn\\n        User burn function for token id \\n     */\\n    function burn(uint256 tokenId) public {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not allowed\\\");\\n        _burn(tokenId);\\n        mintedCounter.decrement();\\n    }\\n\\n    /// Internal only\\n    function __burn(uint256 tokenId) public onlyInternal {\\n        _burn(tokenId);\\n        mintedCounter.decrement();\\n    }\\n\\n    /**\\n        Simple override for owner interface.\\n     */\\n    function owner()\\n        public\\n        view\\n        override(OwnableUpgradeable)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    /// internal alias for overrides\\n    function __owner()\\n        public\\n        view\\n        override(IBaseERC721Interface)\\n        returns (address)\\n    {\\n        return owner();\\n    }\\n\\n    /// Get royalty information for token\\n    /// ignored token id to get royalty info. able to override and set per-token royalties\\n    /// @param _salePrice sales price for token to determine royalty split\\n    function royaltyInfo(uint256, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        // If ownership is revoked, don't set royalties.\\n        if (owner() == address(0x0)) {\\n            return (owner(), 0);\\n        }\\n        return (owner(), (_salePrice * advancedConfig.royaltyBps) / 10_000);\\n    }\\n\\n    /// Default simple token-uri implementation. works for ipfs folders too\\n    /// @param tokenId token id ot get uri for\\n    /// @return default uri getter functionality\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"No token\\\");\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    advancedConfig.uriBase,\\n                    StringsUpgradeable.toString(tokenId),\\n                    advancedConfig.uriExtension\\n                )\\n            );\\n    }\\n\\n    /// internal base override\\n    function __tokenURI(uint256 tokenId)\\n        public\\n        view\\n        onlyInternal\\n        returns (string memory)\\n    {\\n        return tokenURI(tokenId);\\n    }\\n\\n    /// Exposing token exists check for base contract\\n    function __exists(uint256 tokenId) external view override returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /// Getter for approved or owner\\n    function __isApprovedOrOwner(address spender, uint256 tokenId)\\n        external\\n        view\\n        override\\n        onlyInternal\\n        returns (bool)\\n    {\\n        return _isApprovedOrOwner(spender, tokenId);\\n    }\\n\\n    /// IERC165 getter\\n    /// @param interfaceId interfaceId bytes4 to check support for\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            type(IBaseERC721Interface).interfaceId == interfaceId ||\\n            ERC721Upgradeable.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x6779d0735992b2ed17a766d5b4de197cd189416069f8dfc04c444de77bbc07dd\",\"license\":\"GPL-3.0\"},\"contracts/base/IBaseERC721Interface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\n/// Additional features and functions assigned to the\\n/// Base721 contract for hooks and overrides\\ninterface IBaseERC721Interface {\\n    /*\\n     Exposing common NFT internal functionality for base contract overrides\\n     To save gas and make API cleaner this is only for new functionality not exposed in\\n     the core ERC721 contract\\n    */\\n\\n    /// Mint an NFT. Allowed to mint by owner, approval or by the parent contract\\n    /// @param tokenId id to burn\\n    function __burn(uint256 tokenId) external;\\n\\n    /// Mint an NFT. Allowed only by the parent contract\\n    /// @param to address to mint to\\n    /// @param tokenId token id to mint\\n    function __mint(address to, uint256 tokenId) external;\\n\\n    /// Set the base URI of the contract. Allowed only by parent contract\\n    /// @param base base uri\\n    /// @param extension extension\\n    function __setBaseURI(string memory base, string memory extension) external;\\n\\n    /* Exposes common internal read features for public use */\\n\\n    /// Token exists\\n    /// @param tokenId token id to see if it exists\\n    function __exists(uint256 tokenId) external view returns (bool);\\n\\n    /// Simple approval for operation check on token for address\\n    /// @param spender address spending/changing token\\n    /// @param tokenId tokenID to change / operate on\\n    function __isApprovedOrOwner(address spender, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function __isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    function __tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function __owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x97f7849166efc61ae0f4fa7c755796e8e909023ab93c29c7fdd1fb5adde9abe8\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5043608052608051612455610030600039600061036401526124556000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806370a0823111610104578063a22cb465116100a2578063d1a0152011610071578063d1a015201461040d578063e985e9c514610420578063f2fde38b14610433578063f5dbba9d1461044657600080fd5b8063a22cb465146103c1578063b1a78e3f146103d4578063b88d4fde146103e7578063c87b56dd146103fa57600080fd5b80638553c3e9116100de5780638553c3e9146103865780638da5cb5b1461039957806395d89b41146103a1578063a1f1fdb9146103a957600080fd5b806370a0823114610344578063715018a61461035757806382ea7bfe1461035f57600080fd5b806318160ddd1161017c57806342842e0e1161014b57806342842e0e146102f857806342966c681461030b57806352d9e77a1461031e5780636352211e1461033157600080fd5b806318160ddd1461028a57806323b872dd146102a05780632a55205a146102b35780633dc8ded7146102e557600080fd5b8063081812fc116101b8578063081812fc14610231578063087ff6181461025c578063095ea7b31461026f57806313effa0f1461028257600080fd5b806301278b02146101df57806301ffc9a7146101f457806306fdde031461021c575b600080fd5b6101f26101ed366004611cc7565b610459565b005b610207610202366004611d41565b6104c9565b60405190151581526020015b60405180910390f35b61022461050f565b6040516102139190611db6565b61024461023f366004611dc9565b6105a1565b6040516001600160a01b039091168152602001610213565b61020761026a366004611df9565b610636565b6101f261027d366004611e2c565b610649565b61024461075a565b610292610769565b604051908152602001610213565b6101f26102ae366004611e56565b610774565b6102c66102c1366004611e92565b6107a6565b604080516001600160a01b039093168352602083019190915201610213565b6101f26102f3366004611e2c565b610807565b6101f2610306366004611e56565b610862565b6101f2610319366004611dc9565b61087d565b61020761032c366004611e2c565b6108d6565b61024461033f366004611dc9565b610921565b610292610352366004611eb4565b610998565b6101f2610a1f565b6102927f000000000000000000000000000000000000000000000000000000000000000081565b610207610394366004611dc9565b610a8a565b610244610aa9565b610224610abd565b6103b1610acc565b6040516102139493929190611ecf565b6101f26103cf366004611f22565b610bff565b6101f26103e2366004611f4c565b610cc4565b6101f26103f5366004612062565b610db8565b610224610408366004611dc9565b610df0565b6101f261041b366004611dc9565b610e77565b61020761042e366004611df9565b610eb6565b6101f2610441366004611eb4565b610efb565b610224610454366004611dc9565b610fc8565b33301461049d5760405162461bcd60e51b815260206004820152600d60248201526c13db9b1e481a5b9d195c9b985b609a1b60448201526064015b60405180910390fd5b81516104b09060cb906020850190611b59565b5080516104c49060cc906020840190611b59565b505050565b600063152a902d60e11b6001600160e01b0319831614806104fa5750633523b4bb60e21b6001600160e01b03198316145b80610509575061050982611017565b92915050565b60606065805461051e906120de565b80601f016020809104026020016040519081016040528092919081815260200182805461054a906120de565b80156105975780601f1061056c57610100808354040283529160200191610597565b820191906000526020600020905b81548152906001019060200180831161057a57829003601f168201915b5050505050905090565b6000818152606760205260408120546001600160a01b031661061a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610494565b506000908152606960205260409020546001600160a01b031690565b60006106428383610eb6565b9392505050565b600061065482610921565b9050806001600160a01b0316836001600160a01b031614156106c25760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610494565b336001600160a01b03821614806106de57506106de8133610eb6565b6107505760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610494565b6104c48383611067565b6000610764610aa9565b905090565b600061076460c95490565b61077f335b826110d5565b61079b5760405162461bcd60e51b815260040161049490612119565b6104c48383836111ac565b600080806107b2610aa9565b6001600160a01b031614156107d4576107c9610aa9565b600091509150610800565b6107dc610aa9565b60ca54612710906107f19061ffff1686612180565b6107fb91906121b5565b915091505b9250929050565b3330146108465760405162461bcd60e51b815260206004820152600d60248201526c13db9b1e481a5b9d195c9b985b609a1b6044820152606401610494565b6108508282611357565b61085e60c980546001019055565b5050565b6104c483838360405180602001604052806000815250610db8565b61088633610779565b6108c05760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b6044820152606401610494565b6108c9816114a5565b6108d360c961154c565b50565b60003330146109175760405162461bcd60e51b815260206004820152600d60248201526c13db9b1e481a5b9d195c9b985b609a1b6044820152606401610494565b61064283836110d5565b6000818152606760205260408120546001600160a01b0316806105095760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610494565b60006001600160a01b038216610a035760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610494565b506001600160a01b031660009081526068602052604090205490565b33610a28610aa9565b6001600160a01b031614610a7e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610494565b610a8860006115a3565b565b6000818152606760205260408120546001600160a01b03161515610509565b60006107646097546001600160a01b031690565b60606066805461051e906120de565b60ca805460cb805461ffff9092169291610ae5906120de565b80601f0160208091040260200160405190810160405280929190818152602001828054610b11906120de565b8015610b5e5780601f10610b3357610100808354040283529160200191610b5e565b820191906000526020600020905b815481529060010190602001808311610b4157829003601f168201915b505050505090806002018054610b73906120de565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9f906120de565b8015610bec5780601f10610bc157610100808354040283529160200191610bec565b820191906000526020600020905b815481529060010190602001808311610bcf57829003601f168201915b5050506003909301549192505060ff1684565b6001600160a01b038216331415610c585760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610494565b336000818152606a602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600054610100900460ff1680610cdd575060005460ff16155b610cf95760405162461bcd60e51b8152600401610494906121c9565b600054610100900460ff16158015610d1b576000805461ffff19166101011790555b610d2584846115f5565b610d2d61167c565b815160ca805461ffff191661ffff9092169190911781556020808401518051859392610d5e9260cb92910190611b59565b5060408201518051610d7a916002840191602090910190611b59565b50606091909101516003909101805460ff1916911515919091179055610d9f85610efb565b8015610db1576000805461ff00191690555b5050505050565b610dc233836110d5565b610dde5760405162461bcd60e51b815260040161049490612119565b610dea848484846116f7565b50505050565b6000818152606760205260409020546060906001600160a01b0316610e425760405162461bcd60e51b81526020600482015260086024820152672737903a37b5b2b760c11b6044820152606401610494565b60cb610e4d8361172a565b604051610e6192919060cc906020016122b1565b6040516020818303038152906040529050919050565b3330146108c05760405162461bcd60e51b815260206004820152600d60248201526c13db9b1e481a5b9d195c9b985b609a1b6044820152606401610494565b6001600160a01b038083166000908152606a6020908152604080832093851683529290529081205460ff168061064257506001600160a01b0382163014905092915050565b33610f04610aa9565b6001600160a01b031614610f5a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610494565b6001600160a01b038116610fbf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610494565b6108d3816115a3565b60603330146110095760405162461bcd60e51b815260206004820152600d60248201526c13db9b1e481a5b9d195c9b985b609a1b6044820152606401610494565b61050982610df0565b919050565b60006001600160e01b031982166380ac58cd60e01b148061104857506001600160e01b03198216635b5e139f60e01b145b8061050957506301ffc9a760e01b6001600160e01b0319831614610509565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061109c82610921565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152606760205260408120546001600160a01b031661114e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610494565b600061115983610921565b9050806001600160a01b0316846001600160a01b031614806111945750836001600160a01b0316611189846105a1565b6001600160a01b0316145b806111a457506111a48185610eb6565b949350505050565b826001600160a01b03166111bf82610921565b6001600160a01b0316146112275760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610494565b6001600160a01b0382166112895760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610494565b611294838383611828565b61129f600082611067565b6001600160a01b03831660009081526068602052604081208054600192906112c89084906122e4565b90915550506001600160a01b03821660009081526068602052604081208054600192906112f69084906122fb565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0382166113ad5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610494565b6000818152606760205260409020546001600160a01b0316156114125760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610494565b61141e60008383611828565b6001600160a01b03821660009081526068602052604081208054600192906114479084906122fb565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006114b082610921565b90506114be81600084611828565b6114c9600083611067565b6001600160a01b03811660009081526068602052604081208054600192906114f29084906122e4565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b80548061159b5760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f7700000000006044820152606401610494565b600019019055565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff168061160e575060005460ff16155b61162a5760405162461bcd60e51b8152600401610494906121c9565b600054610100900460ff1615801561164c576000805461ffff19166101011790555b6116546118ed565b61165c6118ed565b6116668383611957565b80156104c4576000805461ff0019169055505050565b600054610100900460ff1680611695575060005460ff16155b6116b15760405162461bcd60e51b8152600401610494906121c9565b600054610100900460ff161580156116d3576000805461ffff19166101011790555b6116db6118ed565b6116e36119ec565b80156108d3576000805461ff001916905550565b6117028484846111ac565b61170e84848484611a4c565b610dea5760405162461bcd60e51b815260040161049490612313565b60608161174e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611778578061176281612365565b91506117719050600a836121b5565b9150611752565b60008167ffffffffffffffff81111561179357611793611bf2565b6040519080825280601f01601f1916602001820160405280156117bd576020820181803683370190505b5090505b84156111a4576117d26001836122e4565b91506117df600a86612380565b6117ea9060306122fb565b60f81b8183815181106117ff576117ff612394565b60200101906001600160f81b031916908160001a905350611821600a866121b5565b94506117c1565b60cd5460ff16156104c4576040516001600160a01b0384811660248301528316604482015260648101829052600090309060840160408051601f198184030181529181526020820180516001600160e01b031663cad3be8360e01b1790525161189191906123aa565b600060405180830381855af49150503d80600081146118cc576040519150601f19603f3d011682016040523d82523d6000602084013e6118d1565b606091505b5050905080600081146118e357610db1565b3d6000803e3d6000fd5b600054610100900460ff1680611906575060005460ff16155b6119225760405162461bcd60e51b8152600401610494906121c9565b600054610100900460ff161580156116e3576000805461ffff191661010117905580156108d3576000805461ff001916905550565b600054610100900460ff1680611970575060005460ff16155b61198c5760405162461bcd60e51b8152600401610494906121c9565b600054610100900460ff161580156119ae576000805461ffff19166101011790555b82516119c1906065906020860190611b59565b5081516119d5906066906020850190611b59565b5080156104c4576000805461ff0019169055505050565b600054610100900460ff1680611a05575060005460ff16155b611a215760405162461bcd60e51b8152600401610494906121c9565b600054610100900460ff16158015611a43576000805461ffff19166101011790555b6116e3336115a3565b60006001600160a01b0384163b15611b4e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611a909033908990889088906004016123c6565b602060405180830381600087803b158015611aaa57600080fd5b505af1925050508015611ada575060408051601f3d908101601f19168201909252611ad791810190612402565b60015b611b34573d808015611b08576040519150601f19603f3d011682016040523d82523d6000602084013e611b0d565b606091505b508051611b2c5760405162461bcd60e51b815260040161049490612313565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506111a4565b506001949350505050565b828054611b65906120de565b90600052602060002090601f016020900481019282611b875760008555611bcd565b82601f10611ba057805160ff1916838001178555611bcd565b82800160010185558215611bcd579182015b82811115611bcd578251825591602001919060010190611bb2565b50611bd9929150611bdd565b5090565b5b80821115611bd95760008155600101611bde565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715611c2b57611c2b611bf2565b60405290565b600067ffffffffffffffff80841115611c4c57611c4c611bf2565b604051601f8501601f19908116603f01168101908282118183101715611c7457611c74611bf2565b81604052809350858152868686011115611c8d57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611cb857600080fd5b61064283833560208501611c31565b60008060408385031215611cda57600080fd5b823567ffffffffffffffff80821115611cf257600080fd5b611cfe86838701611ca7565b93506020850135915080821115611d1457600080fd5b50611d2185828601611ca7565b9150509250929050565b6001600160e01b0319811681146108d357600080fd5b600060208284031215611d5357600080fd5b813561064281611d2b565b60005b83811015611d79578181015183820152602001611d61565b83811115610dea5750506000910152565b60008151808452611da2816020860160208601611d5e565b601f01601f19169290920160200192915050565b6020815260006106426020830184611d8a565b600060208284031215611ddb57600080fd5b5035919050565b80356001600160a01b038116811461101257600080fd5b60008060408385031215611e0c57600080fd5b611e1583611de2565b9150611e2360208401611de2565b90509250929050565b60008060408385031215611e3f57600080fd5b611e4883611de2565b946020939093013593505050565b600080600060608486031215611e6b57600080fd5b611e7484611de2565b9250611e8260208501611de2565b9150604084013590509250925092565b60008060408385031215611ea557600080fd5b50508035926020909101359150565b600060208284031215611ec657600080fd5b61064282611de2565b61ffff85168152608060208201526000611eec6080830186611d8a565b8281036040840152611efe8186611d8a565b915050821515606083015295945050505050565b8035801515811461101257600080fd5b60008060408385031215611f3557600080fd5b611f3e83611de2565b9150611e2360208401611f12565b60008060008060808587031215611f6257600080fd5b611f6b85611de2565b9350602085013567ffffffffffffffff80821115611f8857600080fd5b611f9488838901611ca7565b94506040870135915080821115611faa57600080fd5b611fb688838901611ca7565b93506060870135915080821115611fcc57600080fd5b9086019060808289031215611fe057600080fd5b611fe8611c08565b823561ffff81168114611ffa57600080fd5b815260208301358281111561200e57600080fd5b61201a8a828601611ca7565b60208301525060408301358281111561203257600080fd5b61203e8a828601611ca7565b60408301525061205060608401611f12565b60608201529598949750929550505050565b6000806000806080858703121561207857600080fd5b61208185611de2565b935061208f60208601611de2565b925060408501359150606085013567ffffffffffffffff8111156120b257600080fd5b8501601f810187136120c357600080fd5b6120d287823560208401611c31565b91505092959194509250565b600181811c908216806120f257607f821691505b6020821081141561211357634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561219a5761219a61216a565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826121c4576121c461219f565b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b8054600090600181811c908083168061223157607f831692505b602080841082141561225357634e487b7160e01b600052602260045260246000fd5b8180156122675760018114612278576122a5565b60ff198616895284890196506122a5565b60008881526020902060005b8681101561229d5781548b820152908501908301612284565b505084890196505b50505050505092915050565b60006122bd8286612217565b84516122cd818360208901611d5e565b6122d981830186612217565b979650505050505050565b6000828210156122f6576122f661216a565b500390565b6000821982111561230e5761230e61216a565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60006000198214156123795761237961216a565b5060010190565b60008261238f5761238f61219f565b500690565b634e487b7160e01b600052603260045260246000fd5b600082516123bc818460208701611d5e565b9190910192915050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526123f86080830184611d8a565b9695505050505050565b60006020828403121561241457600080fd5b815161064281611d2b56fea264697066735822122039cad36d901e94a8e0ffad83f669dbcc206abf2098e74461a73ddc942ca5ba1964736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c806370a0823111610104578063a22cb465116100a2578063d1a0152011610071578063d1a015201461040d578063e985e9c514610420578063f2fde38b14610433578063f5dbba9d1461044657600080fd5b8063a22cb465146103c1578063b1a78e3f146103d4578063b88d4fde146103e7578063c87b56dd146103fa57600080fd5b80638553c3e9116100de5780638553c3e9146103865780638da5cb5b1461039957806395d89b41146103a1578063a1f1fdb9146103a957600080fd5b806370a0823114610344578063715018a61461035757806382ea7bfe1461035f57600080fd5b806318160ddd1161017c57806342842e0e1161014b57806342842e0e146102f857806342966c681461030b57806352d9e77a1461031e5780636352211e1461033157600080fd5b806318160ddd1461028a57806323b872dd146102a05780632a55205a146102b35780633dc8ded7146102e557600080fd5b8063081812fc116101b8578063081812fc14610231578063087ff6181461025c578063095ea7b31461026f57806313effa0f1461028257600080fd5b806301278b02146101df57806301ffc9a7146101f457806306fdde031461021c575b600080fd5b6101f26101ed366004611cc7565b610459565b005b610207610202366004611d41565b6104c9565b60405190151581526020015b60405180910390f35b61022461050f565b6040516102139190611db6565b61024461023f366004611dc9565b6105a1565b6040516001600160a01b039091168152602001610213565b61020761026a366004611df9565b610636565b6101f261027d366004611e2c565b610649565b61024461075a565b610292610769565b604051908152602001610213565b6101f26102ae366004611e56565b610774565b6102c66102c1366004611e92565b6107a6565b604080516001600160a01b039093168352602083019190915201610213565b6101f26102f3366004611e2c565b610807565b6101f2610306366004611e56565b610862565b6101f2610319366004611dc9565b61087d565b61020761032c366004611e2c565b6108d6565b61024461033f366004611dc9565b610921565b610292610352366004611eb4565b610998565b6101f2610a1f565b6102927f000000000000000000000000000000000000000000000000000000000000000081565b610207610394366004611dc9565b610a8a565b610244610aa9565b610224610abd565b6103b1610acc565b6040516102139493929190611ecf565b6101f26103cf366004611f22565b610bff565b6101f26103e2366004611f4c565b610cc4565b6101f26103f5366004612062565b610db8565b610224610408366004611dc9565b610df0565b6101f261041b366004611dc9565b610e77565b61020761042e366004611df9565b610eb6565b6101f2610441366004611eb4565b610efb565b610224610454366004611dc9565b610fc8565b33301461049d5760405162461bcd60e51b815260206004820152600d60248201526c13db9b1e481a5b9d195c9b985b609a1b60448201526064015b60405180910390fd5b81516104b09060cb906020850190611b59565b5080516104c49060cc906020840190611b59565b505050565b600063152a902d60e11b6001600160e01b0319831614806104fa5750633523b4bb60e21b6001600160e01b03198316145b80610509575061050982611017565b92915050565b60606065805461051e906120de565b80601f016020809104026020016040519081016040528092919081815260200182805461054a906120de565b80156105975780601f1061056c57610100808354040283529160200191610597565b820191906000526020600020905b81548152906001019060200180831161057a57829003601f168201915b5050505050905090565b6000818152606760205260408120546001600160a01b031661061a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610494565b506000908152606960205260409020546001600160a01b031690565b60006106428383610eb6565b9392505050565b600061065482610921565b9050806001600160a01b0316836001600160a01b031614156106c25760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610494565b336001600160a01b03821614806106de57506106de8133610eb6565b6107505760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610494565b6104c48383611067565b6000610764610aa9565b905090565b600061076460c95490565b61077f335b826110d5565b61079b5760405162461bcd60e51b815260040161049490612119565b6104c48383836111ac565b600080806107b2610aa9565b6001600160a01b031614156107d4576107c9610aa9565b600091509150610800565b6107dc610aa9565b60ca54612710906107f19061ffff1686612180565b6107fb91906121b5565b915091505b9250929050565b3330146108465760405162461bcd60e51b815260206004820152600d60248201526c13db9b1e481a5b9d195c9b985b609a1b6044820152606401610494565b6108508282611357565b61085e60c980546001019055565b5050565b6104c483838360405180602001604052806000815250610db8565b61088633610779565b6108c05760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b6044820152606401610494565b6108c9816114a5565b6108d360c961154c565b50565b60003330146109175760405162461bcd60e51b815260206004820152600d60248201526c13db9b1e481a5b9d195c9b985b609a1b6044820152606401610494565b61064283836110d5565b6000818152606760205260408120546001600160a01b0316806105095760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610494565b60006001600160a01b038216610a035760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610494565b506001600160a01b031660009081526068602052604090205490565b33610a28610aa9565b6001600160a01b031614610a7e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610494565b610a8860006115a3565b565b6000818152606760205260408120546001600160a01b03161515610509565b60006107646097546001600160a01b031690565b60606066805461051e906120de565b60ca805460cb805461ffff9092169291610ae5906120de565b80601f0160208091040260200160405190810160405280929190818152602001828054610b11906120de565b8015610b5e5780601f10610b3357610100808354040283529160200191610b5e565b820191906000526020600020905b815481529060010190602001808311610b4157829003601f168201915b505050505090806002018054610b73906120de565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9f906120de565b8015610bec5780601f10610bc157610100808354040283529160200191610bec565b820191906000526020600020905b815481529060010190602001808311610bcf57829003601f168201915b5050506003909301549192505060ff1684565b6001600160a01b038216331415610c585760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610494565b336000818152606a602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600054610100900460ff1680610cdd575060005460ff16155b610cf95760405162461bcd60e51b8152600401610494906121c9565b600054610100900460ff16158015610d1b576000805461ffff19166101011790555b610d2584846115f5565b610d2d61167c565b815160ca805461ffff191661ffff9092169190911781556020808401518051859392610d5e9260cb92910190611b59565b5060408201518051610d7a916002840191602090910190611b59565b50606091909101516003909101805460ff1916911515919091179055610d9f85610efb565b8015610db1576000805461ff00191690555b5050505050565b610dc233836110d5565b610dde5760405162461bcd60e51b815260040161049490612119565b610dea848484846116f7565b50505050565b6000818152606760205260409020546060906001600160a01b0316610e425760405162461bcd60e51b81526020600482015260086024820152672737903a37b5b2b760c11b6044820152606401610494565b60cb610e4d8361172a565b604051610e6192919060cc906020016122b1565b6040516020818303038152906040529050919050565b3330146108c05760405162461bcd60e51b815260206004820152600d60248201526c13db9b1e481a5b9d195c9b985b609a1b6044820152606401610494565b6001600160a01b038083166000908152606a6020908152604080832093851683529290529081205460ff168061064257506001600160a01b0382163014905092915050565b33610f04610aa9565b6001600160a01b031614610f5a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610494565b6001600160a01b038116610fbf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610494565b6108d3816115a3565b60603330146110095760405162461bcd60e51b815260206004820152600d60248201526c13db9b1e481a5b9d195c9b985b609a1b6044820152606401610494565b61050982610df0565b919050565b60006001600160e01b031982166380ac58cd60e01b148061104857506001600160e01b03198216635b5e139f60e01b145b8061050957506301ffc9a760e01b6001600160e01b0319831614610509565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061109c82610921565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152606760205260408120546001600160a01b031661114e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610494565b600061115983610921565b9050806001600160a01b0316846001600160a01b031614806111945750836001600160a01b0316611189846105a1565b6001600160a01b0316145b806111a457506111a48185610eb6565b949350505050565b826001600160a01b03166111bf82610921565b6001600160a01b0316146112275760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610494565b6001600160a01b0382166112895760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610494565b611294838383611828565b61129f600082611067565b6001600160a01b03831660009081526068602052604081208054600192906112c89084906122e4565b90915550506001600160a01b03821660009081526068602052604081208054600192906112f69084906122fb565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0382166113ad5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610494565b6000818152606760205260409020546001600160a01b0316156114125760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610494565b61141e60008383611828565b6001600160a01b03821660009081526068602052604081208054600192906114479084906122fb565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006114b082610921565b90506114be81600084611828565b6114c9600083611067565b6001600160a01b03811660009081526068602052604081208054600192906114f29084906122e4565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b80548061159b5760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f7700000000006044820152606401610494565b600019019055565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff168061160e575060005460ff16155b61162a5760405162461bcd60e51b8152600401610494906121c9565b600054610100900460ff1615801561164c576000805461ffff19166101011790555b6116546118ed565b61165c6118ed565b6116668383611957565b80156104c4576000805461ff0019169055505050565b600054610100900460ff1680611695575060005460ff16155b6116b15760405162461bcd60e51b8152600401610494906121c9565b600054610100900460ff161580156116d3576000805461ffff19166101011790555b6116db6118ed565b6116e36119ec565b80156108d3576000805461ff001916905550565b6117028484846111ac565b61170e84848484611a4c565b610dea5760405162461bcd60e51b815260040161049490612313565b60608161174e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611778578061176281612365565b91506117719050600a836121b5565b9150611752565b60008167ffffffffffffffff81111561179357611793611bf2565b6040519080825280601f01601f1916602001820160405280156117bd576020820181803683370190505b5090505b84156111a4576117d26001836122e4565b91506117df600a86612380565b6117ea9060306122fb565b60f81b8183815181106117ff576117ff612394565b60200101906001600160f81b031916908160001a905350611821600a866121b5565b94506117c1565b60cd5460ff16156104c4576040516001600160a01b0384811660248301528316604482015260648101829052600090309060840160408051601f198184030181529181526020820180516001600160e01b031663cad3be8360e01b1790525161189191906123aa565b600060405180830381855af49150503d80600081146118cc576040519150601f19603f3d011682016040523d82523d6000602084013e6118d1565b606091505b5050905080600081146118e357610db1565b3d6000803e3d6000fd5b600054610100900460ff1680611906575060005460ff16155b6119225760405162461bcd60e51b8152600401610494906121c9565b600054610100900460ff161580156116e3576000805461ffff191661010117905580156108d3576000805461ff001916905550565b600054610100900460ff1680611970575060005460ff16155b61198c5760405162461bcd60e51b8152600401610494906121c9565b600054610100900460ff161580156119ae576000805461ffff19166101011790555b82516119c1906065906020860190611b59565b5081516119d5906066906020850190611b59565b5080156104c4576000805461ff0019169055505050565b600054610100900460ff1680611a05575060005460ff16155b611a215760405162461bcd60e51b8152600401610494906121c9565b600054610100900460ff16158015611a43576000805461ffff19166101011790555b6116e3336115a3565b60006001600160a01b0384163b15611b4e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611a909033908990889088906004016123c6565b602060405180830381600087803b158015611aaa57600080fd5b505af1925050508015611ada575060408051601f3d908101601f19168201909252611ad791810190612402565b60015b611b34573d808015611b08576040519150601f19603f3d011682016040523d82523d6000602084013e611b0d565b606091505b508051611b2c5760405162461bcd60e51b815260040161049490612313565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506111a4565b506001949350505050565b828054611b65906120de565b90600052602060002090601f016020900481019282611b875760008555611bcd565b82601f10611ba057805160ff1916838001178555611bcd565b82800160010185558215611bcd579182015b82811115611bcd578251825591602001919060010190611bb2565b50611bd9929150611bdd565b5090565b5b80821115611bd95760008155600101611bde565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715611c2b57611c2b611bf2565b60405290565b600067ffffffffffffffff80841115611c4c57611c4c611bf2565b604051601f8501601f19908116603f01168101908282118183101715611c7457611c74611bf2565b81604052809350858152868686011115611c8d57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611cb857600080fd5b61064283833560208501611c31565b60008060408385031215611cda57600080fd5b823567ffffffffffffffff80821115611cf257600080fd5b611cfe86838701611ca7565b93506020850135915080821115611d1457600080fd5b50611d2185828601611ca7565b9150509250929050565b6001600160e01b0319811681146108d357600080fd5b600060208284031215611d5357600080fd5b813561064281611d2b565b60005b83811015611d79578181015183820152602001611d61565b83811115610dea5750506000910152565b60008151808452611da2816020860160208601611d5e565b601f01601f19169290920160200192915050565b6020815260006106426020830184611d8a565b600060208284031215611ddb57600080fd5b5035919050565b80356001600160a01b038116811461101257600080fd5b60008060408385031215611e0c57600080fd5b611e1583611de2565b9150611e2360208401611de2565b90509250929050565b60008060408385031215611e3f57600080fd5b611e4883611de2565b946020939093013593505050565b600080600060608486031215611e6b57600080fd5b611e7484611de2565b9250611e8260208501611de2565b9150604084013590509250925092565b60008060408385031215611ea557600080fd5b50508035926020909101359150565b600060208284031215611ec657600080fd5b61064282611de2565b61ffff85168152608060208201526000611eec6080830186611d8a565b8281036040840152611efe8186611d8a565b915050821515606083015295945050505050565b8035801515811461101257600080fd5b60008060408385031215611f3557600080fd5b611f3e83611de2565b9150611e2360208401611f12565b60008060008060808587031215611f6257600080fd5b611f6b85611de2565b9350602085013567ffffffffffffffff80821115611f8857600080fd5b611f9488838901611ca7565b94506040870135915080821115611faa57600080fd5b611fb688838901611ca7565b93506060870135915080821115611fcc57600080fd5b9086019060808289031215611fe057600080fd5b611fe8611c08565b823561ffff81168114611ffa57600080fd5b815260208301358281111561200e57600080fd5b61201a8a828601611ca7565b60208301525060408301358281111561203257600080fd5b61203e8a828601611ca7565b60408301525061205060608401611f12565b60608201529598949750929550505050565b6000806000806080858703121561207857600080fd5b61208185611de2565b935061208f60208601611de2565b925060408501359150606085013567ffffffffffffffff8111156120b257600080fd5b8501601f810187136120c357600080fd5b6120d287823560208401611c31565b91505092959194509250565b600181811c908216806120f257607f821691505b6020821081141561211357634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561219a5761219a61216a565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826121c4576121c461219f565b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b8054600090600181811c908083168061223157607f831692505b602080841082141561225357634e487b7160e01b600052602260045260246000fd5b8180156122675760018114612278576122a5565b60ff198616895284890196506122a5565b60008881526020902060005b8681101561229d5781548b820152908501908301612284565b505084890196505b50505050505092915050565b60006122bd8286612217565b84516122cd818360208901611d5e565b6122d981830186612217565b979650505050505050565b6000828210156122f6576122f661216a565b500390565b6000821982111561230e5761230e61216a565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60006000198214156123795761237961216a565b5060010190565b60008261238f5761238f61219f565b500690565b634e487b7160e01b600052603260045260246000fd5b600082516123bc818460208701611d5e565b9190910192915050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526123f86080830184611d8a565b9695505050505050565b60006020828403121561241457600080fd5b815161064281611d2b56fea264697066735822122039cad36d901e94a8e0ffad83f669dbcc206abf2098e74461a73ddc942ca5ba1964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "__mint(address,uint256)": {
        "details": "This mints one edition to the given address by an allowed minter on the edition instance.",
        "params": {
          "to": "address to send the newly minted NFT to"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "params": {
          "tokenId": "Token ID to burn User burn function for token id "
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "initialize(address,string,string,(uint16,string,string,bool))": {
        "params": {
          "_name": "name of NFT contract",
          "_symbol": "symbol of NFT contract",
          "newOwner": "Owner for the new derived nft",
          "settings": "configuration settings for uri, royalty, and hooks features"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "_salePrice": "sales price for token to determine royalty split"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interfaceId bytes4 to check support for"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "token id ot get uri for"
        },
        "returns": {
          "_0": "default uri getter functionality"
        }
      },
      "totalSupply()": {
        "details": "returns the number of minted tokens uses some extra gas but makes etherscan and users happy so :shrug: partial erc721enumerable implemntation"
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "__burn(uint256)": {
        "notice": "Internal only"
      },
      "__exists(uint256)": {
        "notice": "Exposing token exists check for base contract"
      },
      "__isApprovedForAll(address,address)": {
        "notice": "internal getter for approval by all When isApprovedForAll is overridden, this can be used to call original impl"
      },
      "__isApprovedOrOwner(address,uint256)": {
        "notice": "Getter for approved or owner"
      },
      "__mint(address,uint256)": {
        "notice": "Internal-only"
      },
      "__owner()": {
        "notice": "internal alias for overrides"
      },
      "__setBaseURI(string,string)": {
        "notice": "Internal-only function to update the base uri"
      },
      "__tokenURI(uint256)": {
        "notice": "internal base override"
      },
      "constructor": {
        "notice": "Constructor called once when the base contract is deployed"
      },
      "deployedBlock()": {
        "notice": "on-chain record of when this contract was deployed"
      },
      "initialize(address,string,string,(uint16,string,string,bool))": {
        "notice": "Initializer that's called when a new child nft is setup"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Getter to expose appoval status to root contract"
      },
      "owner()": {
        "notice": "Simple override for owner interface."
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "Get royalty information for token ignored token id to get royalty info. able to override and set per-token royalties"
      },
      "supportsInterface(bytes4)": {
        "notice": "IERC165 getter"
      },
      "tokenURI(uint256)": {
        "notice": "Default simple token-uri implementation. works for ipfs folders too"
      }
    },
    "notice": "This smart contract adds features and allows for a ownership only by another smart contract as fallback behavior while also implementing all normal ERC721 functions as expected",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 152,
        "contract": "contracts/base/ERC721Base.sol:ERC721Base",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 155,
        "contract": "contracts/base/ERC721Base.sol:ERC721Base",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1487,
        "contract": "contracts/base/ERC721Base.sol:ERC721Base",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1810,
        "contract": "contracts/base/ERC721Base.sol:ERC721Base",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 221,
        "contract": "contracts/base/ERC721Base.sol:ERC721Base",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 223,
        "contract": "contracts/base/ERC721Base.sol:ERC721Base",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 227,
        "contract": "contracts/base/ERC721Base.sol:ERC721Base",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 231,
        "contract": "contracts/base/ERC721Base.sol:ERC721Base",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 235,
        "contract": "contracts/base/ERC721Base.sol:ERC721Base",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 241,
        "contract": "contracts/base/ERC721Base.sol:ERC721Base",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1037,
        "contract": "contracts/base/ERC721Base.sol:ERC721Base",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/base/ERC721Base.sol:ERC721Base",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/base/ERC721Base.sol:ERC721Base",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1863,
        "contract": "contracts/base/ERC721Base.sol:ERC721Base",
        "label": "mintedCounter",
        "offset": 0,
        "slot": "201",
        "type": "t_struct(Counter)1494_storage"
      },
      {
        "astId": 1884,
        "contract": "contracts/base/ERC721Base.sol:ERC721Base",
        "label": "advancedConfig",
        "offset": 0,
        "slot": "202",
        "type": "t_struct(ConfigSettings)1847_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ConfigSettings)1847_storage": {
        "encoding": "inplace",
        "label": "struct ConfigSettings",
        "members": [
          {
            "astId": 1840,
            "contract": "contracts/base/ERC721Base.sol:ERC721Base",
            "label": "royaltyBps",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 1842,
            "contract": "contracts/base/ERC721Base.sol:ERC721Base",
            "label": "uriBase",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1844,
            "contract": "contracts/base/ERC721Base.sol:ERC721Base",
            "label": "uriExtension",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1846,
            "contract": "contracts/base/ERC721Base.sol:ERC721Base",
            "label": "hasTransferHook",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Counter)1494_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1493,
            "contract": "contracts/base/ERC721Base.sol:ERC721Base",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}